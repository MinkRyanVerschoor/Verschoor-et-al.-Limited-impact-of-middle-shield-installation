---
Title: Cleaning Raw Microclimate Data
Format: html
Authors: M.R.Verschoor
Date: 2024-03-14
editor_options: 
  chunk_output_type: console
---

## Set-up

Notes: ALWAYS TRY TO RUN BEFORE CODING SO THAT PACKAGES ARE THE RIGHT VERSION AND SYNCHED WITH THE RENV ENVIRONMENT

```{r renv environment}

# clear everything in the R environment
rm(list = ls())

# restore the library
renv::restore()

# Load configuration settings for collaborative data loading
source("config.R")  

```


## Loading and installing packages

```{r packages}

# Loading and installing the required Packages

#General

library(tidyverse)

library(data.table)

library(fasttime)

library(lubridate)

```

## Loading in Microclimate data

Purpose of chunk: Import and clean the microclimate data 

Notes: Here, all data .csv files are imported and stored in a single data frame. To allow identification of the individual loggers as the logger data is stored in folders corresponding to the name of the containers. The functions below will name the folder according to the file location. 

NOT NEEDED IF ALREADY MADE, CONINUE TO CHUNK BELOW (SAVES LOT OF TIME)

```{r Loading in Microclimate data}

# Reading in the microclimate data

# Tomst Probe data cleaning for analysis
# reading in the data and binding the different files

# Use the data_path root and specify the sub directories dynamically
# Define the directory for Probes2023-2024 within data_path
probe_data_dir <- file.path(data_path, "Data/Raw/Probes2023-2024/Containers/")

# List all .csv files in the specified directory and its sub directories
tms.sm.files <- list.files(probe_data_dir, pattern = "\\.csv$", recursive = TRUE, full.names = TRUE)

# Initialize an empty list to store data frames, setting length based on the number of files
tms.sm.list <- vector(mode = "list", length = length(tms.sm.files))

# Function to read and name combo using fread for faster reading
read_and_name_combo <- function(TMSpath){
  data <- data.table::fread(TMSpath, sep = ";", header = FALSE)
  data[, probe := basename(TMSpath)]
  data[, subplot := basename(dirname(TMSpath))]
  return(data)
}

# Loop over all files and read each one, storing it in tms.sm.list
for (i in seq_along(tms.sm.files)) {
  TMSpath <- tms.sm.files[[i]]
  tms.sm.list[[i]] <- read_and_name_combo(TMSpath)
}

# Bind all rows together into a single data.table
microclimate2024 <- data.table::rbindlist(tms.sm.list)

```

```{r Cleaning up the probe data}

# Cleaning up the probe data
# Lowercase plots and format the probe code
microclimate2024[, subplot := tolower(subplot)]
microclimate2024[, probe := substr(probe, 6, 13)]

# Rename columns using data.table's `setnames` for efficiency
microclimate2024[, V10 := NULL]  # Remove the unnecessary column

data.table::setnames(microclimate2024, old = names(microclimate2024)[1:9],
         new = c("index", "DateTime", "Timezone", "T1", "T2", "T3", "Moisture", "Shake", "ErrFlag"))

# Convert columns T1, T2, and T3 to numeric in one go
microclimate2024[, c("T1", "T2", "T3") := lapply(.SD, as.numeric), .SDcols = c("T1", "T2", "T3")]

# Convert DateTime to POSIXct with timezone "UTC" (adjust if different format)
microclimate2024[, DateTime := fastPOSIXct(DateTime, tz = "UTC")]

# Add a 2-hour timezone difference
microclimate2024[, DateTime := DateTime + hours(2)]

# Extract Date and Time from the adjusted DateTime
microclimate2024[, Date := as.Date(DateTime)]
microclimate2024[, Time := format(DateTime, "%H:%M:%S")]

# Extract Month and year from the adjusted DateTime and add it as a new column
microclimate2024[, Month := format(DateTime, "%B %Y")]

# Remove the Timezone column and any extra columns
microclimate2024[, Timezone := NULL] 

# getting the correct dates
microclimate2024 = microclimate2024[microclimate2024$DateTime >= "2023-01-01 00:00:00" & microclimate2024$DateTime <= "2024-07-08 00:00:00",]

# Rearrange columns
data.table::setcolorder(microclimate2024, c("index", "DateTime", "Date", "Time", "Month", "probe", "subplot", "T1", "T2", "T3", "Moisture", "Shake", "ErrFlag"))

# Add shield presence/absence column based on `subplot`
microclimate2024[, midshield := ifelse(
    substr(subplot, nchar(subplot), nchar(subplot)) %in% c("a", "c") | subplot == "65d", "present",
    ifelse(substr(subplot, nchar(subplot), nchar(subplot)) %in% c("b", "d") | subplot == "65c", "absent", NA_character_)
)]

```

## Processing Microclimate data and calculating the SWC

Purpose of chunk: Format Logger data and calibrate TMS raw moisture signal to volumetric Soil Water content (SWC, %).

Notes: Resulting SWC is expressed as a fraction between 0 and 1.

```{r Calculating SWC microclimate data}

# Universal TOMST calibration 
microclimate2024 <- microclimate2024  |> 
  dplyr::mutate(SWC = round((Moisture^2 * -1.34e-08
 + Moisture * 0.0002496218 + -0.1578888
), 4))


# Removing the night hours form the data (Optional) & removing decrepit measurements 
microclimate2024 <- microclimate2024[
  Time >= "06:00" & Time <= "21:00" & 
  !(subplot %in% c("63B", "58A")) &
  (SWC >= 0.01 | is.na(SWC)) &
  (T1 <= 45 | is.na(T1)) &
  (T2 <= 45 | is.na(T2)) &
  (T3 <= 45 | is.na(T3)) &
  (T1 >= -20 | is.na(T1)) &
  (T2 >= -20 | is.na(T2)) &
  (T3 >= -20 | is.na(T3))
]


```

```{r Creating the mean and max (statistics) dataframe}

# Define your thresholds
swc_threshold <- 0.1   # Example threshold for SWC
t2_threshold <- 30.0   # Example threshold for T2

# getting the correct dates (drought only)
microclimate2024_stats = microclimate2024[microclimate2024$DateTime >= "2023-05-13 00:00:00" & microclimate2024$DateTime <= "2023-06-30 00:00:00",]

# Calculate the max per probe, the mean per probe and the covariance (FULL)

# Ensure correct handling of conditions
microclimate2024_stats <- microclimate2024 |>
  dplyr::mutate(SWC_below_threshold = SWC < swc_threshold,
         T2_above_threshold = T2 > t2_threshold) |>
  # Replace NA with FALSE in the condition columns
  dplyr::mutate(SWC_below_threshold = tidyr::replace_na(SWC_below_threshold, FALSE),
         T2_above_threshold = tidyr::replace_na(T2_above_threshold, FALSE))

# Aggregate data by day and subplot: find days where each condition is met at least once
daily_counts <- microclimate2024_stats |>
  dplyr::group_by(subplot, Date) |>
  dplyr::summarise(SWC_condition_day = any(SWC_below_threshold),
            T2_condition_day = any(T2_above_threshold),
            .groups = 'drop')

# Count the number of days the SWC condition is met for each subplot
days_condition_met_SWC <- daily_counts |>
  dplyr::group_by(subplot) |>
  dplyr::summarise(num_days_SWC_below_threshold = sum(SWC_condition_day), .groups = 'drop')

# Count the number of days the T2 condition is met for each subplot
days_condition_met_T2 <- daily_counts |>
  dplyr::group_by(subplot) |>
  dplyr::summarise(num_days_T2_above_threshold = sum(T2_condition_day), .groups = 'drop')

# Ensure all subplots are included in the final count dataframes
all_subplots <- microclimate2024_stats |>
  dplyr::select(subplot) |>
  dplyr::distinct()

# Join with all subplots and treatment periods to ensure no subplot-period combination is missing
days_condition_met_SWC <- all_subplots %>%
  left_join(days_condition_met_SWC, by = c("subplot")) %>%
  mutate(num_days_SWC_below_threshold = tidyr::replace_na(num_days_SWC_below_threshold, 0))

days_condition_met_T2 <- all_subplots %>%
  left_join(days_condition_met_T2, by = c("subplot")) %>%
  mutate(num_days_T2_above_threshold = tidyr::replace_na(num_days_T2_above_threshold, 0))

# Combine the SWC and T2 day counts
days_condition_met <- left_join(days_condition_met_SWC, days_condition_met_T2, by = c("subplot"))

# Combine with existing statistics code (if needed)
microclimate2024_stats_drought <- microclimate2024 %>%
  group_by(subplot) %>%
  dplyr::summarise(
    min_SWC = quantile(SWC, 0.05, na.rm = TRUE),
    max_T1 = quantile(T1, 0.95, na.rm = TRUE),
    max_T2 = quantile(T2, 0.95, na.rm = TRUE),
    max_T3 = quantile(T3, 0.95, na.rm = TRUE),
    mean_SWC = mean(SWC, na.rm = TRUE),
    mean_T1 = mean(T1, na.rm = TRUE),
    mean_T2 = mean(T2, na.rm = TRUE),
    mean_T3 = mean(T3, na.rm = TRUE),
    COV_SWC.T2 = cov(SWC, T2, use = "complete.obs")
  ) %>%
  mutate(
    stress_index_mean = (
      (mean_T2 - mean(mean_T2, na.rm = TRUE)) / sd(mean_T2, na.rm = TRUE) +
      ((1 - mean_SWC) - mean(1 - mean_SWC, na.rm = TRUE)) / sd(1 - mean_SWC, na.rm = TRUE)),
    stress_index_max = (
      (max_T2 - mean(max_T2, na.rm = TRUE)) / sd(max_T2, na.rm = TRUE) +
      ((1 - min_SWC) - mean(1 - min_SWC, na.rm = TRUE)) / sd(1 - min_SWC, na.rm = TRUE))
  ) %>%
  left_join(days_condition_met, by = c("subplot"))


```


```{r Creating the mean and max (statistics) dataframe for each month}

# Adding periods to the data (this will be kept throughout)
microclimate2024_stats_month <- microclimate2024 %>%
  mutate(
    period = case_when(
      (Date >= "2023-05-13" & Date <= "2023-06-30") ~ "During",
      (Date < "2023-05-13") ~ "Before",
      (Date > "2023-06-30") ~ "After"
    ),
    SWC_below_threshold = SWC < swc_threshold,
    T2_above_threshold = T2 > t2_threshold
  ) %>%
  # Replace NA with FALSE for the condition columns (SWC and T2)
  mutate(
    SWC_below_threshold = replace_na(SWC_below_threshold, FALSE),
    T2_above_threshold = replace_na(T2_above_threshold, FALSE)
  )

# Aggregate data by day and subplot: find days where each condition is met at least once
daily_counts_month <- microclimate2024_stats_month %>%
  group_by(subplot, Date, Month) %>%
  summarise(
    SWC_condition_day = any(SWC_below_threshold),
    T2_condition_day = any(T2_above_threshold),
    .groups = 'drop'
  )

# Count the number of days the SWC condition is met for each subplot (monthly)
days_condition_met_SWC_month <- daily_counts_month %>%
  group_by(subplot, Month) %>%
  summarise(
    num_days_SWC_below_threshold = sum(SWC_condition_day),
    .groups = 'drop'
  )

# Count the number of days the T2 condition is met for each subplot (monthly)
days_condition_met_T2_month <- daily_counts_month %>%
  group_by(subplot, Month) %>%
  summarise(
    num_days_T2_above_threshold = sum(T2_condition_day),
    .groups = 'drop'
  )

# Ensure all subplots are included in the final count dataframes
all_subplots_month <- microclimate2024_stats_month %>%
  select(subplot, Month, period) %>%
  distinct()

# Join with all subplots and treatment periods to ensure no subplot-period combination is missing
days_condition_met_SWC_month <- all_subplots_month %>%
  left_join(days_condition_met_SWC_month, by = c("subplot", "Month")) %>%
  mutate(num_days_SWC_below_threshold = replace_na(num_days_SWC_below_threshold, 0))

days_condition_met_T2_month <- all_subplots_month %>%
  left_join(days_condition_met_T2_month, by = c("subplot", "Month")) %>%
  mutate(num_days_T2_above_threshold = replace_na(num_days_T2_above_threshold, 0))

# Combine the SWC and T2 day counts
days_condition_met_month <- left_join(
  days_condition_met_SWC_month, days_condition_met_T2_month,
  by = c("subplot", "Month")
)

# Calculate the summary statistics (mean, max, quantiles) per probe, without grouping by period
microclimate2024_stats_month_summary <- microclimate2024_stats_month %>%
  group_by(subplot, Month) %>%
  summarise(
    min_SWC = quantile(SWC, 0.05, na.rm = TRUE),
    max_T1 = quantile(T1, 0.95, na.rm = TRUE),
    max_T2 = quantile(T2, 0.95, na.rm = TRUE),
    max_T3 = quantile(T3, 0.95, na.rm = TRUE),
    mean_SWC = mean(SWC, na.rm = TRUE),
    mean_T1 = mean(T1, na.rm = TRUE),
    mean_T2 = mean(T2, na.rm = TRUE),
    mean_T3 = mean(T3, na.rm = TRUE),
    COV_SWC.T2 = cov(SWC, T2, use = "complete.obs"),
    .groups = 'drop'
  ) %>%
  mutate(
    stress_index_mean = (
      (mean_T2 - mean(mean_T2, na.rm = TRUE)) / sd(mean_T2, na.rm = TRUE) +
      ((1 - mean_SWC) - mean(1 - mean_SWC, na.rm = TRUE)) / sd(1 - mean_SWC, na.rm = TRUE)),
    stress_index_max = (
      (max_T2 - mean(max_T2, na.rm = TRUE)) / sd(max_T2, na.rm = TRUE) +
      ((1 - min_SWC) - mean(1 - min_SWC, na.rm = TRUE)) / sd(1 - min_SWC, na.rm = TRUE))) 

microclimate2024_stats_month_summary <- microclimate2024_stats_month_summary %>%
  left_join(all_subplots_month, by = c("subplot", "Month")) %>%
  left_join(days_condition_met_month, by = c("subplot", "Month")) %>%
  # Select the 'period' column from the correct dataframe and remove others
  select(-period.x, -period.y) %>%
  rename(period = period) # Ensure only one 'period' column remains


```

```{r Saving the data}

#Saving the cleaned data

# Define the output directory
output_dir <- file.path(data_path, "Data/Cleaned")

# Define the full file path for the CSV
output_file_1 <- file.path(output_dir, "microclimate2024.csv")
output_file_2 <- file.path(output_dir, "microclimate2024_stats_drought.csv")
output_file_3 <- file.path(output_dir, "microclimate2024_stats_month_summary.csv")

# Save the filtered data to a CSV file using fwrite
data.table::fwrite(microclimate2024, file = output_file_1)
data.table::fwrite(microclimate2024_stats_drought, file = output_file_2)
data.table::fwrite(microclimate2024_stats_month_summary, file = output_file_3)

# Confirmation message
cat("Data saved to:", output_file_1, "\n")
cat("Data saved to:", output_file_2, "\n")
cat("Data saved to:", output_file_3, "\n")
```

