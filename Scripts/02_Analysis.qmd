---
Title: Data analysis
Format: html
Authors: M.R.Verschoor
Date: 2024-11-27
editor_options: 
  chunk_output_type: console
---

## Set-up

Notes: ALWAYS TRY TO RUN BEFORE CODING SO THAT PACKAGES ARE THE RIGHT VERSION AND SYNCHED WITH THE RENV ENVIRONMENT

```{r renv environment}

# clear everything in the R environment
rm(list = ls())

# restore the library
renv::restore()

# Load configuration settings for collaborative data loading
source("config.R")  

# Define the output directory
output_dir <- file.path(data_path, "/Figures")

```


## Loading and installing packages

```{r packages}

# Loading and installing the required Packages

#General
library(tidyverse)
library(data.table)
library(MetBrewer)
library(ggh4x)
library(ggsignif)
library(patchwork)
library(lme4)
library(brms)
library(emmeans)
library(extrafont)
library(bayesplot)
library(posterior)

```

## Loading in the Data 

```{r Loading in the data}

#GENERAL NOTE# 
# ----- Load in the data --------# 
microclimate_shield_day = load_data("microclimate_shield_total_day.csv") |> 
  mutate(across(where(is.integer), as.factor))
microclimate_shield_night = load_data("microclimate_shield_total_night.csv")|> 
  mutate(across(where(is.integer), as.factor))
microclimate_shield_date_day = load_data("microclimate_shield_date_day.csv")|> 
  mutate(across(where(is.integer), as.factor))
microclimate_shield_date_night = load_data("microclimate_shield_date_night.csv")|> 
  mutate(across(where(is.integer), as.factor))

# Ensure that Date is in Date format
microclimate_shield_date_day$Date <- as.Date(microclimate_shield_date_day$Date)
microclimate_shield_date_night$Date <- as.Date(microclimate_shield_date_night$Date)

microclimate_shield_date_day$yday <- format(microclimate_shield_date_day$Date, "%j")
microclimate_shield_date_day$yday = as.numeric(microclimate_shield_date_day$yday)

microclimate_shield_date_night$yday <- format(microclimate_shield_date_night$Date, "%j")
microclimate_shield_date_night$yday = as.numeric(microclimate_shield_date_night$yday)

microclimate_shield_date_day$midshield_binomial<-as.integer(if_else(microclimate_shield_date_day$midshield=="present", 1, 0))

microclimate_shield_date_night$midshield_binomial<-as.integer(if_else(microclimate_shield_date_night$midshield=="present", 1, 0))
```

## Setting up the color palette

```{r Setting up the color palette and fonts}

# Load the color palette and ensure it has enough colors for the unique levels in `treatment`
# Define the specific colors for each treatment
palette <- met.brewer("Lakota", n = 6, type = "discrete")
# Create the expanded palette for the gradient (12 colors for 12 species)

shield_colors <- c(
  "present" = palette[5],
  "absent" = palette[3])


loadfonts(device = "all")    # Loads the fonts

```

## Analysis

```{r Analysis day total}

#--------- Day ----------# 

#For the total
m_max_T_95_shield_day = brm(max_T2_95 ~ midshield + (1|div), data = microclimate_shield_day,   chains = 4, 
  iter=4000,
  warmup=1000)

plot(m_max_T_95_shield_day)
pp_check(m_max_T_95_shield_day)
summary(m_max_T_95_shield_day)

saveRDS(m_max_T_95_shield_day, file = "m_max_T_95_shield_day.rds")

sink("m_max_T_95_shield_day_summary.txt")
print(summary(m_max_T_95_shield_day))
sink()

# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(output_dir, "m_max_T_95_shield_day_pp_plot.jpg")

# Generate the pp_check plot and assign it to an object
m_max_T_95_shield_day_pp_plot <- pp_check(m_max_T_95_shield_day)

# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1, 
       plot = m_max_T_95_shield_day_pp_plot, 
       width = 8,        # Width in inches
       height = 6,       # Height in inches
       dpi = 300) 

# Sensitivity analysis for Day Total
m_max_T_90_shield_day <- update(m_max_T_shield_day, formula = max_T2_90 ~ .)
m_max_T_99_shield_day <- update(m_max_T_shield_day, formula = max_T2_99 ~ .)
m_max_T_abs_shield_day <- update(m_max_T_shield_day, formula = max_T2 ~ .)

posterior_day_90 <- as_draws_df(m_max_T_90_shield_day)
posterior_day_95 <- as_draws_df(m_max_T_shield_day)
posterior_day_99 <- as_draws_df(m_max_T_99_shield_day)
posterior_day_abs <- as_draws_df(m_max_T_abs_shield_day)

mcmc_areas(
  list(
    "90th" = posterior_day_90$b_midshieldTRUE,
    "95th" = posterior_day_95$b_midshieldTRUE,
    "99th" = posterior_day_99$b_midshieldTRUE,
    "Abs Max" = posterior_day_abs$b_midshieldTRUE
  ),
  prob = 0.95
)

```

```{r Analysis day per day}

# ----------- Day Per day ----------# 

priors<-prior(cauchy(0,0.5), coef=midshield_binomial)

m_max_T_95_shield_date_day <- brm(
  max_T2_95 ~ midshield_binomial * yday + (1|div),
  prior=priors,
  data = microclimate_shield_date_day,
  chains = 4, 
  iter=4000,
  warmup=1000)

plot(m_max_T_95_shield_date_day)
pp_check(m_max_T_95_shield_date_day)
summary(m_max_T_95_shield_date_day)

saveRDS(m_max_T_95_shield_date_day, file = "m_max_T_95_shield_date_day.rds")

sink("m_max_T_95_shield_date_day_summary.txt")
print(summary(m_max_T_95_shield_date_day))
sink()

# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(output_dir, "m_max_T_95_shield_date_day_pp_plot.jpg")

# Generate the pp_check plot and assign it to an object
m_max_T_95_shield_date_day_pp_plot <- pp_check(m_max_T_95_shield_date_day)

# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1, 
       plot = m_max_T_95_shield_date_day_pp_plot, 
       width = 8,        # Width in inches
       height = 6,       # Height in inches
       dpi = 300) 

# Sensitivity analysis

m_max_T_90_shield_date_day <- update(m_max_T_shield_date_day, formula = max_T2_90 ~ .)
m_max_T_99_shield_date_day <- update(m_max_T_shield_date_day, formula = max_T2_99 ~ .)
m_max_T_abs_shield_date_day <- update(m_max_T_shield_date_day, formula = max_T2 ~ .)

posterior_90 <- as_draws_df(m_max_T_90_shield_date_day)
posterior_95 <- as_draws_df(m_max_T_95_shield_date_day)
posterior_99 <- as_draws_df(m_max_T_99_shield_date_day)
posterior_abs <- as_draws_df(m_max_T_abs_shield_date_day)

# Example: Comparing the coefficient for midshield_binomialTRUE
mcmc_areas(
  list(
    "90th" = posterior_90$b_midshield_binomialTRUE,
    "95th" = posterior_95$b_midshield_binomialTRUE,
    "99th" = posterior_99$b_midshield_binomialTRUE,
    "Abs Max" = posterior_abs$b_midshield_binomialTRUE
  ),
  prob = 0.95
)


```

```{r Analysis night total}

#--------- Night ----------# 

#For the total
m_max_T_shield_night = brm(max_T2_95 ~ midshield + (1|div), data = microclimate_shield_night,   chains = 4, 
  iter=4000,
  warmup=1000)

plot(m_max_T_shield_night)
pp_check(m_max_T_shield_night)
summary(m_max_T_shield_night)

saveRDS(m_max_T_shield_night, file = "m_max_T_shield_night.rds")

sink("m_max_T_shield_night_summary.txt")
print(summary(m_max_T_shield_night))
sink()

# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(output_dir, "m_max_T_shield_night_pp_plot.jpg")

# Generate the pp_check plot and assign it to an object
m_max_T_shield_night_pp_plot <- pp_check(m_max_T_shield_night)

# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1, 
       plot = m_max_T_shield_night_pp_plot, 
       width = 8,        # Width in inches
       height = 6,       # Height in inches
       dpi = 300) 

# Sensitivity analysis for Night Total
m_max_T_90_shield_night <- update(m_max_T_shield_night, formula = max_T2_90 ~ .)
m_max_T_99_shield_night <- update(m_max_T_shield_night, formula = max_T2_99 ~ .)
m_max_T_abs_shield_night <- update(m_max_T_shield_night, formula = max_T2 ~ .)

posterior_night_90 <- as_draws_df(m_max_T_90_shield_night)
posterior_night_95 <- as_draws_df(m_max_T_shield_night)
posterior_night_99 <- as_draws_df(m_max_T_99_shield_night)
posterior_night_abs <- as_draws_df(m_max_T_abs_shield_night)

mcmc_areas(
  list(
    "90th" = posterior_night_90$b_midshieldTRUE,
    "95th" = posterior_night_95$b_midshieldTRUE,
    "99th" = posterior_night_99$b_midshieldTRUE,
    "Abs Max" = posterior_night_abs$b_midshieldTRUE
  ),
  prob = 0.95
)

```

```{r Analysis night per day}

# --------- Night Per day ---------- # 

priors<-prior(cauchy(0,0.5), coef=midshield_binomial)

m_max_T_shield_date_night <- brm(
  max_T2_95 ~ midshield_binomial * yday + (1|div),
  prior=priors,
  data = microclimate_shield_date_night,
  chains = 4, 
  iter=4000,
  warmup=1000)

plot(m_max_T_shield_date_night)
pp_check(m_max_T_shield_date_night)
summary(m_max_T_shield_date_night)

saveRDS(m_max_T_shield_date_night, file = "m_max_T_shield_date_night.rds")

sink("m_max_T_shield_date_night_summary.txt")
print(summary(m_max_T_shield_date_night))
sink()

# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(output_dir, "m_max_T_shield_date_night_pp_plot.jpg")

# Generate the pp_check plot and assign it to an object
m_max_T_shield_date_night_pp_plot <- pp_check(m_max_T_shield_date_night)

# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1, 
       plot = m_max_T_shield_date_night_pp_plot, 
       width = 8,        # Width in inches
       height = 6,       # Height in inches
       dpi = 300) 


```

```{r Analysis spatial heterogenity}

#--------- Distance wall ----------# 

#For the total
m_max_T_shield_dist = brm(max_T2_95 ~ dist_wall + (1|div), data = microclimate_shield_day,   chains = 4, 
  iter=4000,
  warmup=1000)

plot(m_max_T_shield_dist)
summary(m_max_T_shield_dist)
pp_check(m_max_T_shield_dist)

saveRDS(m_max_T_shield_dist, file = "m_max_T_shield_dist.rds")

sink("m_max_T_shield_dist_summary.txt")
print(summary(m_max_T_shield_dist))
sink()

# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(output_dir, "m_max_T_shield_dist_pp_plot.jpg")

# Generate the pp_check plot and assign it to an object
m_max_T_shield_dist_pp_plot <- pp_check(m_max_T_shield_dist)

# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1, 
       plot = m_max_T_shield_dist_pp_plot, 
       width = 8,        # Width in inches
       height = 6,       # Height in inches
       dpi = 300) 



```


## Plots

```{r Plots}


# ------- Plot A: Daytime Violin Plot (no x-title) -------- # 
Plot_A <- ggplot(microclimate_shield_day, aes(x = factor(midshield, levels = c('present', 'absent')), y = max_T2_95, color = midshield, fill = midshield)) +
  geom_violin(position = position_dodge(width = 0.7), alpha = 0.3, width = 0.6) +
  geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.5, position = position_dodge(width = 0.7), alpha = 0.3) +
  stat_summary(fun = mean, geom = "point", size = 4, shape = 16, position = position_dodge(width = 0.7)) +
  stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.3, position = position_dodge(width = 0.7)) +
  labs(y = "Max temp (°C) at 1 cm (06:00 - 21:00)") +
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    axis.text.x = element_text(family = "Arial", size = 16),
    axis.text.y = element_text(family = "Arial", size = 16),
    axis.title.y = element_text(family = "Arial", size = 16, margin = margin(r = 10)),
    legend.position = "none"
  ) +
  scale_color_manual(values = shield_colors) +
  scale_fill_manual(values = shield_colors)

# ------- Plot B: Daytime Time Series (no x-title) -------- # 
Plot_B <- ggplot(microclimate_shield_date_day, aes(x = Date, y = max_T2, color = midshield, fill = midshield)) +
  stat_summary(fun = mean, geom = "point", size = 4, shape = 16) +
  stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.3) +
  stat_summary(fun = mean, geom = "line", size = 1, alpha = 0.7, aes(group = midshield)) +
  labs(y = "Max daily temp (°C) at 1 cm (06:00 - 21:00)") +
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1, family = "Arial", size = 16),
    axis.text.y = element_text(family = "Arial", size = 16),
    axis.title.y = element_text(family = "Arial", size = 16, margin = margin(r = 10)),
    legend.position = "none"
  ) +
  scale_x_date(breaks = scales::date_breaks("3 days"),
               labels = scales::date_format("%b %d")) +
  scale_color_manual(values = shield_colors) +
  scale_fill_manual(values = shield_colors)

# ------- Plot C: Nighttime Violin Plot -------- # 
Plot_C <- ggplot(microclimate_shield_night, aes(x = factor(midshield, levels = c('present', 'absent')), y = max_T2_95, color = midshield, fill = midshield)) +
  geom_violin(position = position_dodge(width = 0.7), alpha = 0.3, width = 0.6) +
  geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.5, position = position_dodge(width = 0.7), alpha = 0.3) +
  stat_summary(fun = mean, geom = "point", size = 4, shape = 16, position = position_dodge(width = 0.7)) +
  stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.3, position = position_dodge(width = 0.7)) +
  labs(x = "Shield configuration", y = "Max temp (°C) at 1 cm (21:00 - 06:00)") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(family = "Arial", size = 16),
    axis.title.x = element_text(family = "Arial", size = 16, margin = margin(t = 10)),
    axis.text.y = element_text(family = "Arial", size = 16),
    axis.title.y = element_text(family = "Arial", size = 16, margin = margin(r = 10)),
    legend.position = "none"
  ) +
  scale_color_manual(values = shield_colors) +
  scale_fill_manual(values = shield_colors)

# ------- Plot D: Nighttime Time Series -------- # 
Plot_D <- ggplot(microclimate_shield_date_night, aes(x = Date, y = max_T2, color = midshield, fill = midshield)) +
  stat_summary(fun = mean, geom = "point", size = 4, shape = 16) +
  stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.3) +
  stat_summary(fun = mean, geom = "line", size = 1, alpha = 0.7, aes(group = midshield)) +
  labs(x = "Date", y = "Max daily temp (°C) at 1 cm (21:00 - 06:00)") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, family = "Arial", size = 16),
    axis.title.x = element_text(family = "Arial", size = 16, margin = margin(t = 10)),
    axis.text.y = element_text(family = "Arial", size = 16),
    axis.title.y = element_text(family = "Arial", size = 16, margin = margin(r = 10)),
    legend.position = "none"
  ) +
  scale_x_date(breaks = scales::date_breaks("3 days"),
               labels = scales::date_format("%b %d")) +
  scale_color_manual(values = shield_colors) +
  scale_fill_manual(values = shield_colors)

# ------- Combine and Adjust Layout -------- #
combined_plot <- (Plot_A + Plot_B) / (Plot_C + Plot_D) +
  theme(plot.tag = element_text(size = 20, face = "bold"),
        plot.tag.position = c(0, 1.1))  # More space between tag and plot

# Save to file
output_dir <- file.path(data_path, "Figures/")
if (!dir.exists(output_dir)) dir.create(output_dir, recursive = TRUE)
ggsave(file.path(output_dir, "Plot_final.pdf"), combined_plot, width = 14, height = 12, dpi = 300, device = cairo_pdf)


```


