---
Title: Data analysis
Format: html
Authors: M.R.Verschoor
Date: 2024-11-27
editor_options: 
  chunk_output_type: console
---

## Set-up

Notes: ALWAYS TRY TO RUN BEFORE CODING SO THAT PACKAGES ARE THE RIGHT VERSION AND SYNCHED WITH THE RENV ENVIRONMENT

```{r renv environment}

# clear everything in the R environment
rm(list = ls())

# restore the library
renv::restore()

# Load configuration settings for collaborative data loading
source("config.R")  

# Define the output directory
output_dir <- file.path(data_path, "/Figures")

```


## Loading and installing packages

```{r packages}

# Loading and installing the required Packages

#General
library(tidyverse)
library(data.table)
library(MetBrewer)
library(ggh4x)
library(ggsignif)
library(patchwork)
library(lme4)
library(brms)
library(extrafont)

#CMDSTAN

library(cmdstanr)


```

## Loading in the Data 

```{r Loading in the data}

#GENERAL NOTE# 
# ----- Load in the data --------# 
microclimate_shield_day = load_data("microclimate_shield_total_day.csv") |> 
  mutate(across(where(is.integer), as.factor))
microclimate_shield_night = load_data("microclimate_shield_total_night.csv")|> 
  mutate(across(where(is.integer), as.factor))
microclimate_shield_date_day = load_data("microclimate_shield_date_day.csv")|> 
  mutate(across(where(is.integer), as.factor))
microclimate_shield_date_night = load_data("microclimate_shield_date_night.csv")|> 
  mutate(across(where(is.integer), as.factor))

# Ensure that Date is in Date format
microclimate_shield_date_day$Date <- as.Date(microclimate_shield_date_day$Date)
microclimate_shield_date_night$Date <- as.Date(microclimate_shield_date_night$Date)

```

## Setting up the color palette

```{r Setting up the color palette and fonts}

# Load the color palette and ensure it has enough colors for the unique levels in `treatment`
# Define the specific colors for each treatment
palette <- met.brewer("Lakota", n = 6, type = "discrete")
# Create the expanded palette for the gradient (12 colors for 12 species)

shield_colors <- c(
  "present" = palette[5],
  "absent" = palette[3])


loadfonts(device = "all")    # Loads the fonts

```

## Analysis

```{r Analysis}

#--------- Distance wall ----------# 

#For the total
m_max_T_shield_dist = brm(max_T2_95 ~ dist_wall + (1|div), data = microclimate_shield_day)

plot(m_max_T_shield_dist)
summary(m_max_T_shield_dist)
pp_check(m_max_T_shield_dist)

saveRDS(m_max_T_shield_dist, file = "m_max_T_shield_dist.rds")

sink("m_max_T_shield_dist_summary.txt")
print(summary(m_max_T_shield_dist))
sink()

# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(output_dir, "m_max_T_shield_dist_pp_plot.jpg")

# Generate the pp_check plot and assign it to an object
m_max_T_shield_dist_pp_plot <- pp_check(m_max_T_shield_dist)

# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1, 
       plot = m_max_T_shield_dist_pp_plot, 
       width = 8,        # Width in inches
       height = 6,       # Height in inches
       dpi = 300) 


#--------- Day ----------# 

#For the total
m_max_T_shield_day = brm(max_T2_95 ~ midshield + (1|div), data = microclimate_shield_day)

plot(m_max_T_shield_day)
pp_check(m_max_T_shield_day)
summary(m_max_T_shield_day)

saveRDS(m_max_T_shield_day, file = "m_max_T_shield_day.rds")

sink("m_max_T_shield_day_summary.txt")
print(summary(m_max_T_shield_day))
sink()

# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(output_dir, "m_max_T_shield_day_pp_plot.jpg")

# Generate the pp_check plot and assign it to an object
m_max_T_shield_day_pp_plot <- pp_check(m_max_T_shield_day)

# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1, 
       plot = m_max_T_shield_day_pp_plot, 
       width = 8,        # Width in inches
       height = 6,       # Height in inches
       dpi = 300) 

# ----------- Day Per day ----------# 

m_max_T_shield_date_day <- brm(
  max_T2_95 ~ midshield * Date + (1|div),
  data = microclimate_shield_date_day,
  chains = 4)


plot(m_max_T_shield_date_day)
pp_check(m_max_T_shield_date_day)
summary(m_max_T_shield_date_day)

# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(output_dir, "m_max_T_shield_day_pp_plot.jpg")

# Generate the pp_check plot and assign it to an object
m_max_T_shield_day_pp_plot <- pp_check(m_max_T_shield_day)

# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1, 
       plot = m_max_T_shield_day_pp_plot, 
       width = 8,        # Width in inches
       height = 6,       # Height in inches
       dpi = 300) 

#--------- Night ----------# 

#For the total
m_max_T_shield_night = brm(max_T2_95 ~ midshield + (1|div), data = microclimate_shield_night)

plot(m_max_T_shield_night)
pp_check(m_max_T_shield_night)
summary(m_max_T_shield_night)

saveRDS(m_max_T_shield_night, file = "m_max_T_shield_night.rds")

sink("m_max_T_shield_night_summary.txt")
print(summary(m_max_T_shield_night))
sink()

# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(output_dir, "m_max_T_shield_night_pp_plot.jpg")

# Generate the pp_check plot and assign it to an object
m_max_T_shield_night_pp_plot <- pp_check(m_max_T_shield_night)

# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1, 
       plot = m_max_T_shield_night_pp_plot, 
       width = 8,        # Width in inches
       height = 6,       # Height in inches
       dpi = 300) 


# --------- Night Per day ---------- # 

m_max_T_shield_date_day<- brm(max_T2_95 ~ midshield * Date + (1|div), data = microclimate_shield_date_day)

plot(m_max_T_shield_date_day)
pp_check(m_max_T_shield_date_day)
summary(m_max_T_shield_date_day)








# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(output_dir, "Figure_pp_check.jpg")

# Generate the pp_check plot and assign it to an object
pp_plot <- pp_check(m_max_T_shield_day)

# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1, 
       plot = pp_plot, 
       width = 8,        # Width in inches
       height = 6,       # Height in inches
       dpi = 300) 

```

## Plots

```{r Plots}

Plot_ST_shield = ggplot(microclimate_shield_day, aes(x = factor(dist_wall, levels = c('1', '2', '3', '4')), y = max_T2_95, color = dist_wall, fill = dist_wall)) +
  geom_violin(position = position_dodge(width = 0.7), alpha = 0.3, width = 0.6) +
  geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.5, position = position_dodge(width = 0.7), alpha = 0.3) + # Adjusted dot size and position
  stat_summary(fun = mean, geom = "point", size = 4, shape = 16, position = position_dodge(width = 0.7)) +
  stat_summary(fun.data = mean_cl_normal, geom = "errorbar", 
               width = 0.3, position = position_dodge(width = 0.7)) +
  labs(x = "Shield configuration", y = "Maximum temperature at 1cm (°C)") +
  theme_classic() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, family = "Arial", size = 16),
    axis.text.y = element_text(family = "Arial", size = 16),
    axis.title.x = element_text(family = "Arial", size = 16,
                                margin = margin(t = 10, r = 0, b = 0, l = 0)), # Adds 10 units of space to the bottom,
    axis.title.y = element_text(family = "Arial", size = 16, 
                                margin = margin(t = 0, r = 10, b = 0, l = 0)), # Adds 10 units of space to the right
    legend.title = element_text(family = "Arial", size = 16),
    legend.text = element_text(family = "Arial", size = 16),
    legend.position = "none",
    legend.key = element_blank(),
    panel.grid = element_blank(),
    panel.border = element_blank(),
    plot.margin = unit(c(1, 1, 1, 1), "cm"),
    panel.grid.minor = element_line(color = "gray", linetype = "dashed", size = 0.5) # Add minor gridlines
  ) +
  scale_x_discrete(expand = expansion(mult = c(0.1, 0.1))) +
  scale_color_manual(values = shield_colors) +
  scale_fill_manual(values = shield_colors) 

Plot_ST_shield


Plot_ST_day_shield = ggplot(microclimate_shield_day, aes(x = Date, y = max_T2, color = midshield, fill = midshield)) + 
  # Plot summary statistics (mean) with stat_summary
  stat_summary(fun = mean, geom = "point", size = 4, shape = 16) + 
  
  # Add error bars (mean ± CI or SE) using stat_summary
  stat_summary(fun.data = mean_cl_normal, geom = "errorbar", 
               width = 0.3) + 
  
  # Add a line connecting the mean points using stat_summary
  stat_summary(fun = mean, geom = "line", size = 1, alpha = 0.7, aes(group = midshield)) + 
  
  # Customize labels and theme
  labs(x = "Date", y = "Maximum daily temperature at 1cm (°C)") +
  theme_classic() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, family = "Arial", size = 16),
    axis.text.y = element_text(family = "Arial", size = 16),
    axis.title.x = element_text(family = "Arial", size = 16, 
                                margin = margin(t = 10, r = 0, b = 0, l = 0)),
    axis.title.y = element_text(family = "Arial", size = 16, 
                                margin = margin(t = 0, r = 10, b = 0, l = 0)), # Adds space between the label and axis
    legend.title = element_text(family = "Arial", size = 16),
    legend.text = element_text(family = "Arial", size = 16),
    legend.position = "none",
    legend.key = element_blank(),
    panel.grid = element_blank(),
    panel.border = element_blank(),
    plot.margin = unit(c(1, 1, 1, 1), "cm"),
    panel.grid.minor = element_line(color = "gray", linetype = "dashed", size = 0.5) # Add minor gridlines
  ) +
  
  # Customize the x-axis to handle Date as continuous and display all dates
  scale_x_date(
    breaks = scales::date_breaks("3 days"),  # Display every 2 days on the x-axis
    labels = scales::date_format("%b %d"),  # Format the date labels as "Month Day"
    expand = expansion(mult = c(0.05, 0.05))  # Add some space at both ends of the plot
  ) +
  
  # Set color scale for midshield
  scale_color_manual(values = shield_colors) +
  scale_fill_manual(values = shield_colors)

# Print the plot
Plot_ST_day_shield

combined_plot <- Plot_ST_shield + Plot_ST_day_shield +
  plot_layout(ncol = 2, widths = c(1, 1)) + 
  plot_annotation(tag_levels = "A")

# Display the combined plot
combined_plot



```
