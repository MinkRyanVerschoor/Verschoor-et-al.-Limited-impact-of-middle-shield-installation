---
Title: Cleaning Raw Microclimate Data
Format: html
Authors: M.R.Verschoor
Date: 2024-03-14
editor_options: 
  chunk_output_type: console
---

## Set-up

Notes: ALWAYS TRY TO RUN BEFORE CODING SO THAT PACKAGES ARE THE RIGHT VERSION AND SYNCHED WITH THE RENV ENVIRONMENT

```{r renv environment}

# clear everything in the R environment
rm(list = ls())

# restore the library
renv::restore()

data_path <- "data/figures"
if (!dir.exists(data_path)) dir.create(data_path, recursive = TRUE)
```

## Loading and installing packages

```{r packages}

# Loading and installing the required Packages

#General

library(data.table)
library(fasttime)
library(lubridate)
library(tidyverse)
library(MetBrewer)
library(ggh4x)
library(ggsignif)
library(patchwork)
library(brms)
library(emmeans)
library(extrafont)
library(bayesplot)
library(posterior)

```

## Loading in Microclimate data

Purpose of chunk: Import and clean the microclimate data 

Notes: Here, all data .csv files are imported and stored in a single data frame. To allow identification of the individual loggers as the logger data is stored in folders corresponding to the name of the containers. The functions below will name the folder according to the file location. 

NOT NEEDED IF ALREADY MADE, CONINUE TO CHUNK BELOW (SAVES LOT OF TIME)

```{r Loading in Data Zenodo}

# These files are hosted on Zenodo at DOI: 10.5281/zenodo.16677435

# Define URLs to files on Zenodo
microclimate_url <- "https://zenodo.org/record/16677435/files/Bioclive_microclimate_shield_2024.csv?download=1"
design_url <- "https://zenodo.org/record/16677435/files/bioclive_design.csv?download=1"

# Define local filenames
microclimate_file <- "data/Bioclive_microclimate_shield_2024.csv"
design_file <- "data/bioclive_design.csv"

# Create data directory if it doesn't exist
if (!dir.exists("data")) dir.create("data")

# Download microclimate data if needed
if (!file.exists(microclimate_file)) {
  message("Downloading microclimate data...")
  download.file(microclimate_url, destfile = microclimate_file, mode = "wb")
} else {
  message("Microclimate data already exists locally.")
}

# Download design data if needed
if (!file.exists(design_file)) {
  message("Downloading design file...")
  download.file(design_url, destfile = design_file, mode = "wb")
} else {
  message("Design file already exists locally.")
}

# Now load the data
microclimate_shield <- readr::read_csv(microclimate_file)
bioclive_design <- readr::read_csv(design_file)


```

```{r Adding wall distance to Microclimate data}

# Loading Bioclive design
bioclive_design <- bioclive_design|>
  select(-...1) |>
  mutate(subplot = paste0(plot, subplot)) |>
  mutate(
    dist_wall = case_when(
      plot %in% 1:11 | plot %in% c(12, 22, 23, 33, 34, 44, 55, 66, 77, 45, 56, 67, 78:88) ~ 1,
      plot %in% 13:21 | plot %in% 68:76 | plot %in% c(24, 35, 46, 57, 32, 43, 54, 65) ~ 2,
      plot %in% 25:31 | plot %in% 58:64 | plot %in% c(36, 47, 53, 42) ~ 3,
      plot %in% 37:41 | plot %in% 48:52 ~ 4,
      TRUE ~ NA_real_ # If no condition matches, return NA
    )
  )

```

```{r Cleaning up the probe data}

# Cleaning up the probe data
# Lowercase plots and format the probe code

# Convert to data.table
setDT(microclimate_shield)

microclimate_shield[, subplot := tolower(subplot)]
microclimate_shield[, probe := substr(probe, 6, 13)]

# Rename columns using data.table's `setnames` for efficiency
data.table::setnames(microclimate_shield, old = names(microclimate_shield)[1:9],
         new = c("index", "DateTime", "Timezone", "T1", "T2", "T3", "Moisture", "Shake", "ErrFlag"))

microclimate_shield[, V10 := NULL]  # Remove the unnecessary column

# Convert columns T1, T2, and T3 to numeric in one go
microclimate_shield[, c("T1", "T2", "T3") := lapply(.SD, as.numeric), .SDcols = c("T1", "T2", "T3")]

# Convert DateTime to POSIXct with timezone "UTC" (adjust if different format)
microclimate_shield[, DateTime := fastPOSIXct(DateTime, tz = "UTC")]

# Add a 2-hour timezone difference
microclimate_shield[, DateTime := DateTime + hours(2)]

# Extract Date and Time from the adjusted DateTime
microclimate_shield[, Date := as.Date(DateTime)]
microclimate_shield[, Time := format(DateTime, "%H:%M:%S")]

# Extract Month and year from the adjusted DateTime and add it as a new column
microclimate_shield[, Month := format(DateTime, "%B %Y")]

# Remove the Timezone column and any extra columns
microclimate_shield[, Timezone := NULL] 

# getting the correct dates
microclimate_shield = microclimate_shield[microclimate_shield$DateTime >= "2024-08-05 00:00:00",]

# Rearrange columns
data.table::setcolorder(microclimate_shield, c("index", "DateTime", "Date", "Time", "Month", "probe", "subplot", "T1", "T2", "T3", "Moisture", "Shake", "ErrFlag"))

# Add shield presence/absence column based on `subplot`
microclimate_shield[, midshield := ifelse(
    substr(subplot, nchar(subplot), nchar(subplot)) %in% c("a", "c") | subplot == "65d", "present",
    ifelse(substr(subplot, nchar(subplot), nchar(subplot)) %in% c("b", "d") | subplot == "65c", "absent", NA_character_)
)]

```

## Processing Microclimate data and calculating the SWC

Purpose of chunk: Format Logger data and calibrate TMS raw moisture signal to volumetric Soil Water content (SWC, %).

Notes: Resulting SWC is expressed as a fraction between 0 and 1.

```{r Calculating SWC microclimate data}

# Universal TOMST calibration 
microclimate_shield <- microclimate_shield  |> 
  dplyr::mutate(SWC = round((Moisture^2 * -1.34e-08
 + Moisture * 0.0002496218 + -0.1578888
), 4))


# Removing the night hours (21:00 - 06:00) from the data & removing decrepit measurements 
microclimate_shield_day <- microclimate_shield[
  Time >= "06:00" & Time <= "21:00" & 
  !(subplot %in% c("63B", "58A")) &
  (SWC >= 0.01 | is.na(SWC)) &
  (T1 <= 45 | is.na(T1)) &
  (T2 <= 45 | is.na(T2)) &
  (T3 <= 45 | is.na(T3)) &
  (T1 >= -20 | is.na(T1)) &
  (T2 >= -20 | is.na(T2)) &
  (T3 >= -20 | is.na(T3))
]

microclimate_shield$Time <- as.POSIXct(microclimate_shield$Time, format="%H:%M:%S")

# Assuming `Time` is a POSIXct or POSIXlt object, or it's in an easy-to-parse format
microclimate_shield_night <- microclimate_shield[
  (format(Time, "%H:%M:%S") >= "21:00:00" | format(Time, "%H:%M:%S") <= "06:00:00") & 
  !(subplot %in% c("63B", "58A")) &
  (SWC >= 0.01 | is.na(SWC)) &
  (T1 <= 45 | is.na(T1)) &
  (T2 <= 45 | is.na(T2)) &
  (T3 <= 45 | is.na(T3)) &
  (T1 >= -20 | is.na(T1)) &
  (T2 >= -20 | is.na(T2)) &
  (T3 >= -20 | is.na(T3))
]

```


```{r Creating the mean and max dataframe}

# Calculate the max per probe, the mean per probe for the total period

# Calculate the max per probe, the mean per probe for the total period, but group only by 'subplot' and 'Date'
microclimate_shield_total_day <- microclimate_shield_day %>%
  group_by(subplot) %>%  # Group by subplot and Date only
  dplyr::summarise(
    min_SWC = min(SWC, na.rm = TRUE),
    max_T1 = max(T1, na.rm = TRUE),
    max_T2 = max(T2, na.rm = TRUE),
    max_T3 = max(T3, na.rm = TRUE),
    min_SWC_1 = quantile(SWC, 0.01, na.rm = TRUE),
    max_T1_99 = quantile(T1, 0.99, na.rm = TRUE),
    max_T2_99 = quantile(T2, 0.99, na.rm = TRUE),
    max_T3_99 = quantile(T3, 0.99, na.rm = TRUE),
    min_SWC_5 = quantile(SWC, 0.05, na.rm = TRUE),
    max_T1_95 = quantile(T1, 0.95, na.rm = TRUE),
    max_T2_95 = quantile(T2, 0.95, na.rm = TRUE),
    max_T3_95 = quantile(T3, 0.95, na.rm = TRUE),
    min_SWC_10 = quantile(SWC, 0.10, na.rm = TRUE),
    max_T1_90 = quantile(T1, 0.90, na.rm = TRUE),
    max_T2_90 = quantile(T2, 0.90, na.rm = TRUE),
    max_T3_90 = quantile(T3, 0.90, na.rm = TRUE)
  ) %>%
  ungroup()  # Ungroup after summarisation

# Now join the original data back to keep 'probe' and 'midshield' columns
microclimate_shield_total_day <- microclimate_shield_total_day %>%
  left_join(
    microclimate_shield %>%
      select(subplot, probe, midshield) %>%
      distinct(),  # Keep distinct rows of 'probe' and 'midshield' for each subplot & Date
    by = c("subplot")
  ) |> 
  left_join(bioclive_design)

# Calculate the min per probe, the mean per probe for the total period, but group only by 'subplot' and 'Date'
microclimate_shield_total_night <- microclimate_shield_night %>%
  group_by(subplot) %>%
  dplyr::summarise(
    # absolute mins
    min_SWC = min(SWC, na.rm = TRUE),
    min_T1 = min(T1, na.rm = TRUE),
    min_T2 = min(T2, na.rm = TRUE),
    min_T3 = min(T3, na.rm = TRUE),

    # Lower quarantines (cold extremes)
    min_T1_01 = quantile(T1, 0.01, na.rm = TRUE),
    min_T2_01 = quantile(T2, 0.01, na.rm = TRUE),
    min_T3_01 = quantile(T3, 0.01, na.rm = TRUE),
    min_T1_05 = quantile(T1, 0.05, na.rm = TRUE),
    min_T2_05 = quantile(T2, 0.05, na.rm = TRUE),
    min_T3_05 = quantile(T3, 0.05, na.rm = TRUE),
    min_T1_10 = quantile(T1, 0.10, na.rm = TRUE),
    min_T2_10 = quantile(T2, 0.10, na.rm = TRUE),
    min_T3_10 = quantile(T3, 0.10, na.rm = TRUE),
    
   # SWC quantiles
    min_SWC_1 = quantile(SWC, 0.01, na.rm = TRUE),
    min_SWC_5 = quantile(SWC, 0.05, na.rm = TRUE),
    min_SWC_10 = quantile(SWC, 0.10, na.rm = TRUE)
  ) %>%
  ungroup()

# Now join the original data back to keep 'probe' and 'midshield' columns
microclimate_shield_total_night <- microclimate_shield_total_night %>%
  left_join(
    microclimate_shield %>%
      select(subplot, probe, midshield) %>%
      distinct(),  # Keep distinct rows of 'probe' and 'midshield' for each subplot & Date
    by = c("subplot")
  ) |> 
  left_join(bioclive_design)


```

```{r Creating the mean and max dataframe}

# Calculate the max per probe, the mean per probe per day

# Calculate the max per probe, the mean per probe per day, but group only by 'subplot' and 'Date'
microclimate_shield_date_day <- microclimate_shield_day %>%
  group_by(subplot, Date) %>%  # Group by subplot and Date only
   dplyr::summarise(
    min_SWC = min(SWC, na.rm = TRUE),
    max_T1 = max(T1, na.rm = TRUE),
    max_T2 = max(T2, na.rm = TRUE),
    max_T3 = max(T3, na.rm = TRUE),
    min_SWC_1 = quantile(SWC, 0.01, na.rm = TRUE),
    max_T1_99 = quantile(T1, 0.99, na.rm = TRUE),
    max_T2_99 = quantile(T2, 0.99, na.rm = TRUE),
    max_T3_99 = quantile(T3, 0.99, na.rm = TRUE),
    min_SWC_5 = quantile(SWC, 0.05, na.rm = TRUE),
    max_T1_95 = quantile(T1, 0.95, na.rm = TRUE),
    max_T2_95 = quantile(T2, 0.95, na.rm = TRUE),
    max_T3_95 = quantile(T3, 0.95, na.rm = TRUE),
    min_SWC_10 = quantile(SWC, 0.10, na.rm = TRUE),
    max_T1_90 = quantile(T1, 0.90, na.rm = TRUE),
    max_T2_90 = quantile(T2, 0.90, na.rm = TRUE),
    max_T3_90 = quantile(T3, 0.90, na.rm = TRUE)
  ) %>%
  ungroup()  # Ungroup after summarisation

# Now join the original data back to keep 'probe' and 'midshield' columns
microclimate_shield_date_day <- microclimate_shield_date_day %>%
  left_join(
    microclimate_shield %>%
      select(subplot, Date, probe, midshield) %>%
      distinct(),  # Keep distinct rows of 'probe' and 'midshield' for each subplot & Date
    by = c("subplot", "Date")
  ) |> 
  left_join(bioclive_design)

# Calculate the max per probe, the mean per probe for the total period, but group only by 'subplot' and 'Date'
microclimate_shield_date_night <- microclimate_shield_night %>%
  group_by(subplot, Date) %>%  # Group by subplot and Date only
  dplyr::summarise(
    # absolute mins
    min_SWC = min(SWC, na.rm = TRUE),
    min_T1 = min(T1, na.rm = TRUE),
    min_T2 = min(T2, na.rm = TRUE),
    min_T3 = min(T3, na.rm = TRUE),

    # Lower quarantines (cold extremes)
    min_T1_01 = quantile(T1, 0.01, na.rm = TRUE),
    min_T2_01 = quantile(T2, 0.01, na.rm = TRUE),
    min_T3_01 = quantile(T3, 0.01, na.rm = TRUE),
    min_T1_05 = quantile(T1, 0.05, na.rm = TRUE),
    min_T2_05 = quantile(T2, 0.05, na.rm = TRUE),
    min_T3_05 = quantile(T3, 0.05, na.rm = TRUE),
    min_T1_10 = quantile(T1, 0.10, na.rm = TRUE),
    min_T2_10 = quantile(T2, 0.10, na.rm = TRUE),
    min_T3_10 = quantile(T3, 0.10, na.rm = TRUE),
    
   # SWC quantiles
    min_SWC_1 = quantile(SWC, 0.01, na.rm = TRUE),
    min_SWC_5 = quantile(SWC, 0.05, na.rm = TRUE),
    min_SWC_10 = quantile(SWC, 0.10, na.rm = TRUE)
  ) %>%
  ungroup()

# Now join the original data back to keep 'probe' and 'midshield' columns
microclimate_shield_date_night <- microclimate_shield_date_night %>%
  left_join(
    microclimate_shield %>%
      select(subplot, probe, midshield) %>%
      distinct(),  # Keep distinct rows of 'probe' and 'midshield' for each subplot & Date
    by = c("subplot")
  ) |> 
  left_join(bioclive_design)


```

```{r Preparing the data for analysis}

# Ensure that Date is in Date format
microclimate_shield_date_day$Date <- as.Date(microclimate_shield_date_day$Date)
microclimate_shield_date_night$Date <- as.Date(microclimate_shield_date_night$Date)

microclimate_shield_date_day$yday <- format(microclimate_shield_date_day$Date, "%j")
microclimate_shield_date_day$yday = as.numeric(microclimate_shield_date_day$yday)

microclimate_shield_date_night$yday <- format(microclimate_shield_date_night$Date, "%j")
microclimate_shield_date_night$yday = as.numeric(microclimate_shield_date_night$yday)

microclimate_shield_date_day$midshield_binomial<-as.integer(if_else(microclimate_shield_date_day$midshield=="present", 1, 0))

microclimate_shield_date_night$midshield_binomial<-as.integer(if_else(microclimate_shield_date_night$midshield=="present", 1, 0))
```

## Setting up the color palette

```{r Setting up the color palette and fonts}

# Load the color palette and ensure it has enough colors for the unique levels in `treatment`
# Define the specific colors for each treatment
palette <- met.brewer("Lakota", n = 6, type = "discrete")
# Create the expanded palette for the gradient (12 colors for 12 species)

shield_colors <- c(
  "present" = palette[5],
  "absent" = palette[3])


loadfonts(device = "all")    # Loads the fonts

```

## Analysis

```{r Analysis day month}

#--------- Day ----------# 

#For the total
m_max_T_95_shield_day = brm(max_T2_95 ~ midshield + (1|div), data = microclimate_shield_day,   chains = 4, 
  iter=4000,
  warmup=1000)

plot(m_max_T_95_shield_day)
pp_check(m_max_T_95_shield_day)
summary(m_max_T_95_shield_day)

saveRDS(m_max_T_95_shield_day, file = "m_max_T_95_shield_day.rds")

sink("m_max_T_95_shield_day_summary.txt")
print(summary(m_max_T_95_shield_day))
sink()

# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(data_path, "m_max_T_95_shield_day_pp_plot.jpg")

# Generate the pp_check plot and assign it to an object
m_max_T_95_shield_day_pp_plot <- pp_check(m_max_T_95_shield_day)

# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1, 
       plot = m_max_T_95_shield_day_pp_plot, 
       width = 8,        # Width in inches
       height = 6,       # Height in inches
       dpi = 300) 

# Sensitivity analysis for Day per day
m_max_T_90_shield_day <- update(m_max_T_95_shield_day, formula = max_T2_90 ~ ., newdata = microclimate_shield_day)

saveRDS(m_max_T_90_shield_day, file = "m_max_T_90_shield_day.rds")

sink("m_max_T_90_shield_day_summary.txt")
print(summary(m_max_T_90_shield_day))
sink()

m_max_T_99_shield_day <- update(m_max_T_95_shield_day, formula = max_T2_99 ~ ., newdata = microclimate_shield_day)

saveRDS(m_max_T_99_shield_day, file = "m_max_T_99_shield_day.rds")

sink("m_max_T_99_shield_day_summary.txt")
print(summary(m_max_T_99_shield_day))
sink()

m_max_T_abs_shield_day <- update(m_max_T_95_shield_day, formula = max_T2 ~ ., newdata = microclimate_shield_day)

saveRDS(m_max_T_abs_shield_day, file = "m_max_T_abs_shield_day.rds")

sink("m_max_T_abs_shield_day_summary.txt")
print(summary(m_max_T_abs_shield_day))
sink()

posterior_day_90 <- as_draws_df(m_max_T_90_shield_day)
posterior_day_95 <- as_draws_df(m_max_T_95_shield_day)
posterior_day_99 <- as_draws_df(m_max_T_99_shield_day)
posterior_day_abs <- as_draws_df(m_max_T_abs_shield_day)

# Create a named list of draws for midshieldpresent from each model
draws_list <- list(
  "90th" = posterior_day_90$b_midshieldpresent,
  "95th" = posterior_day_95$b_midshieldpresent,
  "99th" = posterior_day_99$b_midshieldpresent,
  "Abs Max" = posterior_day_abs$b_midshieldpresent
)

# Convert to matrix where each column is a chain
draws_matrix <- do.call(cbind, draws_list)

# Use mcmc_areas
comparison_plot_day = mcmc_areas(draws_matrix, prob = 0.95)

comparison_plot_day

# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(data_path, "comparison_plot_day.jpg")

# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1, 
       plot = comparison_plot_day, 
       width = 8,        # Width in inches
       height = 6,       # Height in inches
       dpi = 300) 

```

```{r Analysis day per day}

# ----------- Day Per day ----------# 

priors<-prior(cauchy(0,0.5), coef=midshield_binomial)

m_max_T_95_shield_date_day <- brm(
  max_T2_95 ~ midshield_binomial * yday + (1|div),
  prior=priors,
  data = microclimate_shield_date_day,
  chains = 4, 
  iter=4000,
  warmup=1000)

plot(m_max_T_95_shield_date_day)
pp_check(m_max_T_95_shield_date_day)
summary(m_max_T_95_shield_date_day)

saveRDS(m_max_T_95_shield_date_day, file = "m_max_T_95_shield_date_day.rds")

sink("m_max_T_95_shield_date_day_summary.txt")
print(summary(m_max_T_95_shield_date_day))
sink()

# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(data_path, "m_max_T_95_shield_date_day_pp_plot.jpg")

# Generate the pp_check plot and assign it to an object
m_max_T_95_shield_date_day_pp_plot <- pp_check(m_max_T_95_shield_date_day)

# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1, 
       plot = m_max_T_95_shield_date_day_pp_plot, 
       width = 8,        # Width in inches
       height = 6,       # Height in inches
       dpi = 300) 

# Sensitivity analysis for Day per day
m_max_T_90_shield_date_day <- update(m_max_T_95_shield_date_day, formula = max_T2_90 ~ ., newdata = microclimate_shield_date_day)

saveRDS(m_max_T_90_shield_date_day, file = "m_max_T_90_shield_date_day.rds")

sink("m_max_T_90_shield_date_day_summary.txt")
print(summary(m_max_T_90_shield_date_day))
sink()

m_max_T_99_shield_date_day <- update(m_max_T_95_shield_date_day, formula = max_T2_99 ~ ., newdata = microclimate_shield_date_day)

saveRDS(m_max_T_99_shield_date_day, file = "m_max_T_99_shield_date_day.rds")

sink("m_max_T_99_shield_date_day_summary.txt")
print(summary(m_max_T_99_shield_date_day))
sink()

m_max_T_abs_shield_date_day <- update(m_max_T_95_shield_date_day, formula = max_T2 ~ ., newdata = microclimate_shield_date_day)

saveRDS(m_max_T_abs_shield_date_day, file = "m_max_T_abs_shield_date_day.rds")

sink("m_max_T_abs_shield_date_day_summary.txt")
print(summary(m_max_T_abs_shield_date_day))
sink()

posterior_date_day_90 <- as_draws_df(m_max_T_90_shield_date_day)
posterior_date_day_95 <- as_draws_df(m_max_T_95_shield_date_day)
posterior_date_day_99 <- as_draws_df(m_max_T_99_shield_date_day)
posterior_date_day_abs <- as_draws_df(m_max_T_abs_shield_date_day)

# Create a named list of draws for midshieldpresent from each model
draws_list <- list(
  "90th" = posterior_date_day_90$b_midshield_binomial,
  "95th" = posterior_date_day_95$b_midshield_binomial,
  "99th" = posterior_date_day_99$b_midshield_binomial,
  "Abs Max" = posterior_date_day_abs$b_midshield_binomial
)

# Convert to matrix where each column is a chain
draws_matrix <- do.call(cbind, draws_list)

# Use mcmc_areas
comparison_plot_date_day = mcmc_areas(draws_matrix, prob = 0.95)

# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(data_path, "comparison_plot_date_day.jpg")

# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1, 
       plot = comparison_plot_date_day, 
       width = 8,        # Width in inches
       height = 6,       # Height in inches
       dpi = 300) 

```

```{r Analysis night month}

#--------- Night ----------# 
# Base model using the 5th percentile
m_min_T_05_shield_night = brm(min_T2_05 ~ midshield + (1|div), 
                              data = microclimate_shield_night,   
                              chains = 4, 
                              iter = 4000,
                              warmup = 1000)

plot(m_min_T_05_shield_night)
pp_check(m_min_T_05_shield_night)
summary(m_min_T_05_shield_night)

saveRDS(m_min_T_05_shield_night, file = "m_min_T_05_shield_night.rds")

sink("m_min_T_05_shield_night_summary.txt")
print(summary(m_min_T_05_shield_night))
sink()

# Save posterior predictive check plot
output_file_plot1 <- file.path(data_path, "m_min_T_05_shield_night_pp_plot.jpg")
m_min_T_05_shield_night_pp_plot <- pp_check(m_min_T_05_shield_night)

ggsave(filename = output_file_plot1, 
       plot = m_min_T_05_shield_night_pp_plot, 
       width = 8, height = 6, dpi = 300)

# Sensitivity analysis for cold extremes
m_min_T_10_shield_night <- update(m_min_T_05_shield_night, formula = min_T2_10 ~ ., newdata = microclimate_shield_night)
saveRDS(m_min_T_10_shield_night, file = "m_min_T_10_shield_night.rds")
sink("m_min_T_10_shield_night_summary.txt")
print(summary(m_min_T_10_shield_night))
sink()

m_min_T_01_shield_night <- update(m_min_T_05_shield_night, formula = min_T2_01 ~ ., newdata = microclimate_shield_night)
saveRDS(m_min_T_01_shield_night, file = "m_min_T_01_shield_night.rds")
sink("m_min_T_01_shield_night_summary.txt")
print(summary(m_min_T_01_shield_night))
sink()

m_min_T_abs_shield_night <- update(m_min_T_05_shield_night, formula = min_T2 ~ ., newdata = microclimate_shield_night)
saveRDS(m_min_T_abs_shield_night, file = "m_min_T_abs_shield_night.rds")
sink("m_min_T_abs_shield_night_summary.txt")
print(summary(m_min_T_abs_shield_night))
sink()

# Extract posterior draws
posterior_night_10 <- as_draws_df(m_min_T_10_shield_night)
posterior_night_05 <- as_draws_df(m_min_T_05_shield_night)
posterior_night_01 <- as_draws_df(m_min_T_01_shield_night)
posterior_night_abs <- as_draws_df(m_min_T_abs_shield_night)

# Combine draws
draws_list <- list(
  "10th"     = posterior_night_10$b_midshieldpresent,
  "5th"      = posterior_night_05$b_midshieldpresent,
  "1st"      = posterior_night_01$b_midshieldpresent,
  "Abs Min"  = posterior_night_abs$b_midshieldpresent
)

draws_matrix <- do.call(cbind, draws_list)

# Visualize
comparison_plot_night <- mcmc_areas(draws_matrix, prob = 0.95)
comparison_plot_night

# Save the comparison plot
output_file_plot1 <- file.path(data_path, "comparison_plot_night_cold_extremes.jpg")
ggsave(filename = output_file_plot1, 
       plot = comparison_plot_night, 
       width = 8, height = 6, dpi = 300)

```

```{r Analysis night per day}

# --------- Night Per Day — Cold Extremes ---------- #

priors <- prior(cauchy(0, 0.5), coef = midshield_binomial)

# Main model with 5th percentile (cold threshold)
m_min_T_05_shield_date_night <- brm(
  min_T2_05 ~ midshield_binomial * yday + (1 | div),
  prior = priors,
  data = microclimate_shield_date_night,
  chains = 4,
  iter = 4000,
  warmup = 1000
)

plot(m_min_T_05_shield_date_night)
pp_check(m_min_T_05_shield_date_night)
summary(m_min_T_05_shield_date_night)

saveRDS(m_min_T_05_shield_date_night, file = "m_min_T_05_shield_date_night.rds")

sink("m_min_T_05_shield_date_night_summary.txt")
print(summary(m_min_T_05_shield_date_night))
sink()

# Save pp_check plot
output_file_plot1 <- file.path(data_path, "m_min_T_05_shield_date_night_pp_plot.jpg")
m_min_T_05_shield_date_night_pp_plot <- pp_check(m_min_T_05_shield_date_night)

ggsave(filename = output_file_plot1,
       plot = m_min_T_05_shield_date_night_pp_plot,
       width = 8, height = 6, dpi = 300)

# Sensitivity models
m_min_T_10_shield_date_night <- update(m_min_T_05_shield_date_night,
                                       formula = min_T2_10 ~ .,
                                       newdata = microclimate_shield_date_night)

saveRDS(m_min_T_10_shield_date_night, file = "m_min_T_10_shield_date_night.rds")
sink("m_min_T_10_shield_date_night_summary.txt")
print(summary(m_min_T_10_shield_date_night))
sink()

m_min_T_01_shield_date_night <- update(m_min_T_05_shield_date_night,
                                       formula = min_T2_01 ~ .,
                                       newdata = microclimate_shield_date_night)
saveRDS(m_min_T_01_shield_date_night, file = "m_min_T_01_shield_date_night.rds")
sink("m_min_T_01_shield_date_night_summary.txt")
print(summary(m_min_T_01_shield_date_night))
sink()

m_min_T_abs_shield_date_night <- update(m_min_T_05_shield_date_night,
                                        formula = min_T2 ~ .,
                                        newdata = microclimate_shield_date_night)
saveRDS(m_min_T_abs_shield_date_night, file = "m_min_T_abs_shield_date_night.rds")
sink("m_min_T_abs_shield_date_night_summary.txt")
print(summary(m_min_T_abs_shield_date_night))
sink()

# Extract posterior draws
posterior_date_night_10 <- as_draws_df(m_min_T_10_shield_date_night)
posterior_date_night_05 <- as_draws_df(m_min_T_05_shield_date_night)
posterior_date_night_01 <- as_draws_df(m_min_T_01_shield_date_night)
posterior_date_night_abs <- as_draws_df(m_min_T_abs_shield_date_night)

# Create a named list of draws
draws_list <- list(
  "10th"    = posterior_date_night_10$b_midshield_binomial,
  "5th"     = posterior_date_night_05$b_midshield_binomial,
  "1st"     = posterior_date_night_01$b_midshield_binomial,
  "Abs Min" = posterior_date_night_abs$b_midshield_binomial
)

draws_matrix <- do.call(cbind, draws_list)

# Plot
comparison_plot_date_night_cold <- mcmc_areas(draws_matrix, prob = 0.95)
comparison_plot_date_night_cold

# Save the comparison plot
output_file_plot1 <- file.path(data_path, "comparison_plot_date_night_cold.jpg")

ggsave(filename = output_file_plot1,
       plot = comparison_plot_date_night_cold,
       width = 8, height = 6, dpi = 300)

```

```{r Analysis spatial heterogenity}

#--------- Distance wall ----------# 

#For the total
m_max_T_shield_dist = brm(max_T2_95 ~ dist_wall + (1|div), data = microclimate_shield_day,   chains = 4, 
  iter=4000,
  warmup=1000)

plot(m_max_T_shield_dist)
summary(m_max_T_shield_dist)
pp_check(m_max_T_shield_dist)

saveRDS(m_max_T_shield_dist, file = "m_max_T_shield_dist.rds")

sink("m_max_T_shield_dist_summary.txt")
print(summary(m_max_T_shield_dist))
sink()

# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(data_path, "m_max_T_shield_dist_pp_plot.jpg")

# Generate the pp_check plot and assign it to an object
m_max_T_shield_dist_pp_plot <- pp_check(m_max_T_shield_dist)

# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1, 
       plot = m_max_T_shield_dist_pp_plot, 
       width = 8,        # Width in inches
       height = 6,       # Height in inches
       dpi = 300) 



```


## Plots

```{r Plots}


# ------- Plot A: Daytime Violin Plot (no x-title) -------- # 
Plot_A <- ggplot(microclimate_shield_day, aes(x = factor(midshield, levels = c('present', 'absent')), y = max_T2_95, color = midshield, fill = midshield)) +
  geom_violin(position = position_dodge(width = 0.7), alpha = 0.3, width = 0.6) +
  geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.5, position = position_dodge(width = 0.7), alpha = 0.3) +
  stat_summary(fun = mean, geom = "point", size = 4, shape = 16, position = position_dodge(width = 0.7)) +
  stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.3, position = position_dodge(width = 0.7)) +
  labs(y = "Max temp (°C) at 1 cm (06:00 - 21:00)") +
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    axis.text.x = element_text(family = "Arial", size = 16),
    axis.text.y = element_text(family = "Arial", size = 16),
    axis.title.y = element_text(family = "Arial", size = 16, margin = margin(r = 10)),
    legend.position = "none"
  ) +
  scale_color_manual(values = shield_colors) +
  scale_fill_manual(values = shield_colors)

# ------- Plot B: Daytime Time Series (no x-title) -------- # 
Plot_B <- ggplot(microclimate_shield_date_day, aes(x = Date, y = max_T2, color = midshield, fill = midshield)) +
  stat_summary(fun = mean, geom = "point", size = 4, shape = 16) +
  stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.3) +
  stat_summary(fun = mean, geom = "line", size = 1, alpha = 0.7, aes(group = midshield)) +
  labs(y = "Max daily temp (°C) at 1 cm (06:00 - 21:00)") +
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1, family = "Arial", size = 16),
    axis.text.y = element_text(family = "Arial", size = 16),
    axis.title.y = element_text(family = "Arial", size = 16, margin = margin(r = 10)),
    legend.position = "none"
  ) +
  scale_x_date(breaks = scales::date_breaks("3 days"),
               labels = scales::date_format("%b %d")) +
  scale_color_manual(values = shield_colors) +
  scale_fill_manual(values = shield_colors)

# ------- Plot C: Nighttime Violin Plot -------- # 
Plot_C <- ggplot(microclimate_shield_night, aes(x = factor(midshield, levels = c('present', 'absent')), y = min_T2_05, color = midshield, fill = midshield)) +
  geom_violin(position = position_dodge(width = 0.7), alpha = 0.3, width = 0.6) +
  geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.5, position = position_dodge(width = 0.7), alpha = 0.3) +
  stat_summary(fun = mean, geom = "point", size = 4, shape = 16, position = position_dodge(width = 0.7)) +
  stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.3, position = position_dodge(width = 0.7)) +
  labs(x = "Shield configuration", y = "Min temp (°C) at 1 cm (21:00 - 06:00)") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(family = "Arial", size = 16),
    axis.title.x = element_text(family = "Arial", size = 16, margin = margin(t = 10)),
    axis.text.y = element_text(family = "Arial", size = 16),
    axis.title.y = element_text(family = "Arial", size = 16, margin = margin(r = 10)),
    legend.position = "none"
  ) +
  scale_color_manual(values = shield_colors) +
  scale_fill_manual(values = shield_colors)

# ------- Plot D: Nighttime Time Series -------- # 
Plot_D <- ggplot(microclimate_shield_date_night, aes(x = Date, y = min_T2_05, color = midshield, fill = midshield)) +
  stat_summary(fun = mean, geom = "point", size = 4, shape = 16) +
  stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.3) +
  stat_summary(fun = mean, geom = "line", size = 1, alpha = 0.7, aes(group = midshield)) +
  labs(x = "Date", y = "Min daily temp (°C) at 1 cm (21:00 - 06:00)") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, family = "Arial", size = 16),
    axis.title.x = element_text(family = "Arial", size = 16, margin = margin(t = 10)),
    axis.text.y = element_text(family = "Arial", size = 16),
    axis.title.y = element_text(family = "Arial", size = 16, margin = margin(r = 10)),
    legend.position = "none"
  ) +
  scale_x_date(breaks = scales::date_breaks("3 days"),
               labels = scales::date_format("%b %d")) +
  scale_color_manual(values = shield_colors) +
  scale_fill_manual(values = shield_colors)

# ------- Combine and Adjust Layout -------- #
combined_plot <- (Plot_A + Plot_B) / (Plot_C + Plot_D) +
  theme(plot.tag = element_text(size = 20, face = "bold"),
        plot.tag.position = c(0, 1.1))  # More space between tag and plot

combined_plot

# Save to file
ggsave(file.path(data_path, "Plot_final.pdf"), combined_plot, width = 14, height = 12, dpi = 300, device = cairo_pdf)


```


