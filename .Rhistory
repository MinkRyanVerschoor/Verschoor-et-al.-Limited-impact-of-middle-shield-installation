saveRDS(m_max_T_90_shield_day, file = "m_max_T_90_shield_day.rds")
sink("m_max_T_90_shield_day_summary.txt")
print(summary(m_max_T_90_shield_day))
sink()
m_max_T_99_shield_day <- update(m_max_T_95_shield_day, formula = max_T2_99 ~ ., newdata = microclimate_shield_day)
saveRDS(m_max_T_99_shield_day, file = "m_max_T_99_shield_day.rds")
sink("m_max_T_99_shield_day_summary.txt")
print(summary(m_max_T_99_shield_day))
sink()
m_max_T_abs_shield_day <- update(m_max_T_95_shield_day, formula = max_T2 ~ ., newdata = microclimate_shield_day)
saveRDS(m_max_T_abs_shield_day, file = "m_max_T_abs_shield_day.rds")
sink("m_max_T_abs_shield_day_summary.txt")
print(summary(m_max_T_abs_shield_day))
sink()
posterior_day_90 <- as_draws_df(m_max_T_90_shield_day)
posterior_day_95 <- as_draws_df(m_max_T_95_shield_day)
posterior_day_99 <- as_draws_df(m_max_T_99_shield_day)
posterior_day_abs <- as_draws_df(m_max_T_abs_shield_day)
# Create a named list of draws for midshieldpresent from each model
draws_list <- list(
"90th" = posterior_day_90$b_midshieldpresent,
"95th" = posterior_day_95$b_midshieldpresent,
"99th" = posterior_day_99$b_midshieldpresent,
"Abs Max" = posterior_day_abs$b_midshieldpresent
)
# Convert to matrix where each column is a chain
draws_matrix <- do.call(cbind, draws_list)
# Use mcmc_areas
comparison_plot_day = mcmc_areas(draws_matrix, prob = 0.95)
comparison_plot_day
# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(output_dir, "comparison_plot_day.jpg")
# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1,
plot = comparison_plot_day,
width = 8,        # Width in inches
height = 6,       # Height in inches
dpi = 300)
# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1,
plot = m_max_T_95_shield_day_pp_plot,
width = 8,        # Width in inches
height = 6,       # Height in inches
dpi = 300)
# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1,
plot = comparison_plot_day,
width = 8,        # Width in inches
height = 6,       # Height in inches
dpi = 300)
# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1,
plot = m_max_T_95_shield_day_pp_plot,
width = 8,        # Width in inches
height = 6,       # Height in inches
dpi = 300)
# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(output_dir, "m_max_T_95_shield_day_pp_plot.jpg")
# Generate the pp_check plot and assign it to an object
m_max_T_95_shield_day_pp_plot <- pp_check(m_max_T_95_shield_day)
# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1,
plot = m_max_T_95_shield_day_pp_plot,
width = 8,        # Width in inches
height = 6,       # Height in inches
dpi = 300)
# Use mcmc_areas
comparison_plot_day = mcmc_areas(draws_matrix, prob = 0.95)
comparison_plot_day
# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(output_dir, "comparison_plot_day.jpg")
# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1,
plot = comparison_plot_day,
width = 8,        # Width in inches
height = 6,       # Height in inches
dpi = 300)
#--------- Night ----------#
# Base model using the 5th percentile
m_min_T_05_shield_night = brm(min_T2_05 ~ midshield + (1|div),
data = microclimate_shield_night,
chains = 4,
iter = 4000,
warmup = 1000)
plot(m_min_T_05_shield_night)
pp_check(m_min_T_05_shield_night)
summary(m_min_T_05_shield_night)
saveRDS(m_min_T_05_shield_night, file = "m_min_T_05_shield_night.rds")
sink("m_min_T_05_shield_night_summary.txt")
print(summary(m_min_T_05_shield_night))
sink()
# Save posterior predictive check plot
output_file_plot1 <- file.path(output_dir, "m_min_T_05_shield_night_pp_plot.jpg")
m_min_T_05_shield_night_pp_plot <- pp_check(m_min_T_05_shield_night)
ggsave(filename = output_file_plot1,
plot = m_min_T_05_shield_night_pp_plot,
width = 8, height = 6, dpi = 300)
# Sensitivity analysis for cold extremes
m_min_T_10_shield_night <- update(m_min_T_05_shield_night, formula = min_T2_10 ~ ., newdata = microclimate_shield_night)
saveRDS(m_min_T_10_shield_night, file = "m_min_T_10_shield_night.rds")
sink("m_min_T_10_shield_night_summary.txt")
print(summary(m_min_T_10_shield_night))
sink()
m_min_T_01_shield_night <- update(m_min_T_05_shield_night, formula = min_T2_01 ~ ., newdata = microclimate_shield_night)
saveRDS(m_min_T_01_shield_night, file = "m_min_T_01_shield_night.rds")
sink("m_min_T_01_shield_night_summary.txt")
print(summary(m_min_T_01_shield_night))
sink()
m_min_T_abs_shield_night <- update(m_min_T_05_shield_night, formula = min_T2 ~ ., newdata = microclimate_shield_night)
saveRDS(m_min_T_abs_shield_night, file = "m_min_T_abs_shield_night.rds")
sink("m_min_T_abs_shield_night_summary.txt")
print(summary(m_min_T_abs_shield_night))
sink()
# Extract posterior draws
posterior_night_10 <- as_draws_df(m_min_T_10_shield_night)
posterior_night_05 <- as_draws_df(m_min_T_05_shield_night)
posterior_night_01 <- as_draws_df(m_min_T_01_shield_night)
posterior_night_abs <- as_draws_df(m_min_T_abs_shield_night)
# Combine draws
draws_list <- list(
"10th"     = posterior_night_10$b_midshieldpresent,
"5th"      = posterior_night_05$b_midshieldpresent,
"1st"      = posterior_night_01$b_midshieldpresent,
"Abs Min"  = posterior_night_abs$b_midshieldpresent
)
draws_matrix <- do.call(cbind, draws_list)
# Visualize
comparison_plot_night <- mcmc_areas(draws_matrix, prob = 0.95)
comparison_plot_night
# Save the comparison plot
output_file_plot1 <- file.path(output_dir, "comparison_plot_night_cold_extremes.jpg")
ggsave(filename = output_file_plot1,
plot = comparison_plot_night,
width = 8, height = 6, dpi = 300)
#--------- Distance wall ----------#
#For the total
m_max_T_shield_dist = brm(max_T2_95 ~ dist_wall + (1|div), data = microclimate_shield_day,   chains = 4,
iter=4000,
warmup=1000)
plot(m_max_T_shield_dist)
pp_check(m_max_T_shield_dist)
saveRDS(m_max_T_shield_dist, file = "m_max_T_shield_dist.rds")
sink("m_max_T_shield_dist_summary.txt")
print(summary(m_max_T_shield_dist))
sink()
# Save as JPG
# Define the full file path for the plot
output_file_plot1 <- file.path(output_dir, "m_max_T_shield_dist_pp_plot.jpg")
# Generate the pp_check plot and assign it to an object
m_max_T_shield_dist_pp_plot <- pp_check(m_max_T_shield_dist)
# Save the plot as a high-resolution PNG
ggsave(filename = output_file_plot1,
plot = m_max_T_shield_dist_pp_plot,
width = 8,        # Width in inches
height = 6,       # Height in inches
dpi = 300)
# clear everything in the R environment
rm(list = ls())
# restore the library
renv::restore()
# Load configuration settings for collaborative data loading
source("config.R")
# Define the output directory
output_dir <- file.path(data_path, "/Figures")
# Chunk 1: renv environment
# clear everything in the R environment
rm(list = ls())
# restore the library
renv::restore()
# Load configuration settings for collaborative data loading
source("config.R")
# Define the output directory
output_dir <- file.path(data_path, "/Figures")
# Chunk 2: packages
# Loading and installing the required Packages
#General
library(tidyverse)
library(data.table)
library(MetBrewer)
library(ggh4x)
library(ggsignif)
library(patchwork)
library(brms)
library(emmeans)
library(extrafont)
library(bayesplot)
library(posterior)
# Chunk 3: Loading in the data
#GENERAL NOTE#
# ----- Load in the data --------#
microclimate_shield_day = load_data("microclimate_shield_total_day.csv") |>
mutate(across(where(is.integer), as.factor))
microclimate_shield_night = load_data("microclimate_shield_total_night.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_day = load_data("microclimate_shield_date_day.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_night = load_data("microclimate_shield_date_night.csv")|>
mutate(across(where(is.integer), as.factor))
# Ensure that Date is in Date format
microclimate_shield_date_day$Date <- as.Date(microclimate_shield_date_day$Date)
microclimate_shield_date_night$Date <- as.Date(microclimate_shield_date_night$Date)
microclimate_shield_date_day$yday <- format(microclimate_shield_date_day$Date, "%j")
microclimate_shield_date_day$yday = as.numeric(microclimate_shield_date_day$yday)
microclimate_shield_date_night$yday <- format(microclimate_shield_date_night$Date, "%j")
microclimate_shield_date_night$yday = as.numeric(microclimate_shield_date_night$yday)
microclimate_shield_date_day$midshield_binomial<-as.integer(if_else(microclimate_shield_date_day$midshield=="present", 1, 0))
microclimate_shield_date_night$midshield_binomial<-as.integer(if_else(microclimate_shield_date_night$midshield=="present", 1, 0))
# Load the color palette and ensure it has enough colors for the unique levels in `treatment`
# Define the specific colors for each treatment
palette <- met.brewer("Lakota", n = 6, type = "discrete")
# Create the expanded palette for the gradient (12 colors for 12 species)
shield_colors <- c(
"present" = palette[5],
"absent" = palette[3])
loadfonts(device = "all")    # Loads the fonts
# ----------- Day Per day ----------#
priors<-prior(cauchy(0,0.5), coef=midshield_binomial)
m_max_T_95_shield_date_day <- brm(
max_T2_95 ~ midshield_binomial * yday + (1|div),
prior=priors,
data = microclimate_shield_date_day,
chains = 4,
iter=4000,
warmup=1000)
# Chunk 1: renv environment
# clear everything in the R environment
rm(list = ls())
# restore the library
renv::restore()
# Load configuration settings for collaborative data loading
source("config.R")
# Define the output directory
output_dir <- file.path(data_path, "/Figures")
# Chunk 2: packages
# Loading and installing the required Packages
#General
library(tidyverse)
library(data.table)
library(MetBrewer)
library(ggh4x)
library(ggsignif)
library(patchwork)
library(brms)
library(emmeans)
library(extrafont)
library(bayesplot)
library(posterior)
# Chunk 3: Loading in the data
#GENERAL NOTE#
# ----- Load in the data --------#
microclimate_shield_day = load_data("microclimate_shield_total_day.csv") |>
mutate(across(where(is.integer), as.factor))
microclimate_shield_night = load_data("microclimate_shield_total_night.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_day = load_data("microclimate_shield_date_day.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_night = load_data("microclimate_shield_date_night.csv")|>
mutate(across(where(is.integer), as.factor))
# Ensure that Date is in Date format
microclimate_shield_date_day$Date <- as.Date(microclimate_shield_date_day$Date)
microclimate_shield_date_night$Date <- as.Date(microclimate_shield_date_night$Date)
microclimate_shield_date_day$yday <- format(microclimate_shield_date_day$Date, "%j")
microclimate_shield_date_day$yday = as.numeric(microclimate_shield_date_day$yday)
microclimate_shield_date_night$yday <- format(microclimate_shield_date_night$Date, "%j")
microclimate_shield_date_night$yday = as.numeric(microclimate_shield_date_night$yday)
microclimate_shield_date_day$midshield_binomial<-as.integer(if_else(microclimate_shield_date_day$midshield=="present", 1, 0))
microclimate_shield_date_night$midshield_binomial<-as.integer(if_else(microclimate_shield_date_night$midshield=="present", 1, 0))
# Chunk 4: Setting up the color palette and fonts
# Load the color palette and ensure it has enough colors for the unique levels in `treatment`
# Define the specific colors for each treatment
palette <- met.brewer("Lakota", n = 6, type = "discrete")
# Create the expanded palette for the gradient (12 colors for 12 species)
shield_colors <- c(
"present" = palette[5],
"absent" = palette[3])
loadfonts(device = "all")    # Loads the fonts
# --------- Night Per Day — Cold Extremes ---------- #
priors <- prior(cauchy(0, 0.5), coef = midshield_binomial)
# Main model with 5th percentile (cold threshold)
m_min_T_05_shield_date_night <- brm(
min_T2_05 ~ midshield_binomial * yday + (1 | div),
prior = priors,
data = microclimate_shield_date_night,
chains = 4,
iter = 4000,
warmup = 1000
)
plot(m_min_T_05_shield_date_night)
summary(m_min_T_05_shield_date_night)
saveRDS(m_min_T_05_shield_date_night, file = "m_min_T_05_shield_date_night.rds")
sink("m_min_T_05_shield_date_night_summary.txt")
print(summary(m_min_T_05_shield_date_night))
sink()
# Save pp_check plot
output_file_plot1 <- file.path(output_dir, "m_min_T_05_shield_date_night_pp_plot.jpg")
m_min_T_05_shield_date_night_pp_plot <- pp_check(m_min_T_05_shield_date_night)
ggsave(filename = output_file_plot1,
plot = m_min_T_05_shield_date_night_pp_plot,
width = 8, height = 6, dpi = 300)
# Sensitivity models
m_min_T_10_shield_date_night <- update(m_min_T_05_shield_date_night,
formula = min_T2_10 ~ .,
newdata = microclimate_shield_date_night)
saveRDS(m_min_T_10_shield_date_night, file = "m_min_T_10_shield_date_night.rds")
sink("m_min_T_10_shield_date_night_summary.txt")
print(summary(m_min_T_10_shield_date_night))
sink()
m_min_T_01_shield_date_night <- update(m_min_T_05_shield_date_night,
formula = min_T2_01 ~ .,
newdata = microclimate_shield_date_night)
saveRDS(m_min_T_01_shield_date_night, file = "m_min_T_01_shield_date_night.rds")
sink("m_min_T_01_shield_date_night_summary.txt")
print(summary(m_min_T_01_shield_date_night))
sink()
m_min_T_abs_shield_date_night <- update(m_min_T_05_shield_date_night,
formula = min_T2 ~ .,
newdata = microclimate_shield_date_night)
saveRDS(m_min_T_abs_shield_date_night, file = "m_min_T_abs_shield_date_night.rds")
sink("m_min_T_abs_shield_date_night_summary.txt")
print(summary(m_min_T_abs_shield_date_night))
sink()
# Extract posterior draws
posterior_date_night_10 <- as_draws_df(m_min_T_10_shield_date_night)
posterior_date_night_05 <- as_draws_df(m_min_T_05_shield_date_night)
posterior_date_night_01 <- as_draws_df(m_min_T_01_shield_date_night)
posterior_date_night_abs <- as_draws_df(m_min_T_abs_shield_date_night)
# Create a named list of draws
draws_list <- list(
"10th"    = posterior_date_night_10$b_midshield_binomial,
"5th"     = posterior_date_night_05$b_midshield_binomial,
"1st"     = posterior_date_night_01$b_midshield_binomial,
"Abs Min" = posterior_date_night_abs$b_midshield_binomial
)
draws_matrix <- do.call(cbind, draws_list)
# Plot
comparison_plot_date_night_cold <- mcmc_areas(draws_matrix, prob = 0.95)
comparison_plot_date_night_cold
# Save the comparison plot
output_file_plot1 <- file.path(output_dir, "comparison_plot_date_night_cold.jpg")
ggsave(filename = output_file_plot1,
plot = comparison_plot_date_night_cold,
width = 8, height = 6, dpi = 300)
# Chunk 1: renv environment
# clear everything in the R environment
rm(list = ls())
# restore the library
renv::restore()
# Load configuration settings for collaborative data loading
source("config.R")
# Chunk 2: packages
# Loading and installing the required Packages
#General
library(tidyverse)
library(data.table)
library(fasttime)
library(lubridate)
# Chunk 3: Loading in Microclimate data
# Loading Bioclive design
bioclive_design <- load_data("bioclive_design.csv") |>
select(-V1) |>
mutate(subplot = paste0(plot, subplot)) |>
mutate(
dist_wall = case_when(
plot %in% 1:11 | plot %in% c(12, 22, 23, 33, 34, 44, 55, 66, 77, 45, 56, 67, 78:88) ~ 1,
plot %in% 13:21 | plot %in% 68:76 | plot %in% c(24, 35, 46, 57, 32, 43, 54, 65) ~ 2,
plot %in% 25:31 | plot %in% 58:64 | plot %in% c(36, 47, 53, 42) ~ 3,
plot %in% 37:41 | plot %in% 48:52 ~ 4,
TRUE ~ NA_real_ # If no condition matches, return NA
)
)
# Reading in the microclimate data
# Tomst Probe data cleaning for analysis
# reading in the data and binding the different files
# Use the data_path root and specify the sub directories dynamically
# Define the directory for Probes2023-2024 within data_path
probe_data_dir <- file.path(data_path, "Data/Raw/Probes/")
# List all .csv files in the specified directory and its sub directories
tms.sm.files <- list.files(probe_data_dir, pattern = "\\.csv$", recursive = TRUE, full.names = TRUE)
# Initialize an empty list to store data frames, setting length based on the number of files
tms.sm.list <- vector(mode = "list", length = length(tms.sm.files))
# Function to read and name combo using fread for faster reading
read_and_name_combo <- function(TMSpath){
data <- data.table::fread(TMSpath, sep = ";", header = FALSE)
data[, probe := basename(TMSpath)]
data[, subplot := basename(dirname(TMSpath))]
return(data)
}
# Loop over all files and read each one, storing it in tms.sm.list
for (i in seq_along(tms.sm.files)) {
TMSpath <- tms.sm.files[[i]]
tms.sm.list[[i]] <- read_and_name_combo(TMSpath)
}
# Bind all rows together into a single data.table
microclimate_shield <- data.table::rbindlist(tms.sm.list)
#Saving the cleaned data
# Define the output directory
output_dir <- file.path(data_path, "Data/Raw")
# Define the full file path for the CSV
output_file_1 <- file.path(output_dir, "Bioclive_microclimate_shield_2024.csv")
# Save the filtered data to a CSV file using fwrite
data.table::fwrite(microclimate_shield, file = output_file_1)
# Confirmation message
cat("Data saved to:", output_file_1, "\n")
# Chunk 1: renv environment
# clear everything in the R environment
rm(list = ls())
# restore the library
renv::restore()
# Chunk 2: packages
# Loading and installing the required Packages
#General
library(tidyverse)
library(data.table)
library(fasttime)
library(lubridate)
# These files are hosted on Zenodo at DOI: 10.5281/zenodo.16677435
# Define URLs to files on Zenodo
microclimate_url <- "https://zenodo.org/record/16677435/files/Bioclive_microclimate_shield_2024.csv?download=1"
design_url <- "https://zenodo.org/record/16677435/files/bioclive_design.csv?download=1"
# Define local filenames
microclimate_file <- "data/Bioclive_microclimate_shield_2024.csv"
design_file <- "data/bioclive_design.csv"
# Create data directory if it doesn't exist
if (!dir.exists("data")) dir.create("data")
# Download microclimate data if needed
if (!file.exists(microclimate_file)) {
message("Downloading microclimate data...")
download.file(microclimate_url, destfile = microclimate_file, mode = "wb")
} else {
message("Microclimate data already exists locally.")
}
# Download design data if needed
if (!file.exists(design_file)) {
message("Downloading design file...")
download.file(design_url, destfile = design_file, mode = "wb")
} else {
message("Design file already exists locally.")
}
# Now load the data
microclimate_shield <- readr::read_csv(microclimate_file)
bioclive_design <- readr::read_csv(design_file)
View(microclimate_shield)
# Loading Bioclive design
bioclive_design <- bioclive_design|>
select(-V1) |>
mutate(subplot = paste0(plot, subplot)) |>
mutate(
dist_wall = case_when(
plot %in% 1:11 | plot %in% c(12, 22, 23, 33, 34, 44, 55, 66, 77, 45, 56, 67, 78:88) ~ 1,
plot %in% 13:21 | plot %in% 68:76 | plot %in% c(24, 35, 46, 57, 32, 43, 54, 65) ~ 2,
plot %in% 25:31 | plot %in% 58:64 | plot %in% c(36, 47, 53, 42) ~ 3,
plot %in% 37:41 | plot %in% 48:52 ~ 4,
TRUE ~ NA_real_ # If no condition matches, return NA
)
)
View(bioclive_design)
# Loading Bioclive design
bioclive_design <- bioclive_design|>
select(...1) |>
mutate(subplot = paste0(plot, subplot)) |>
mutate(
dist_wall = case_when(
plot %in% 1:11 | plot %in% c(12, 22, 23, 33, 34, 44, 55, 66, 77, 45, 56, 67, 78:88) ~ 1,
plot %in% 13:21 | plot %in% 68:76 | plot %in% c(24, 35, 46, 57, 32, 43, 54, 65) ~ 2,
plot %in% 25:31 | plot %in% 58:64 | plot %in% c(36, 47, 53, 42) ~ 3,
plot %in% 37:41 | plot %in% 48:52 ~ 4,
TRUE ~ NA_real_ # If no condition matches, return NA
)
)
library(dplyr)
# Loading Bioclive design
bioclive_design <- bioclive_design|>
select(...1) |>
mutate(subplot = paste0(plot, subplot)) |>
mutate(
dist_wall = case_when(
plot %in% 1:11 | plot %in% c(12, 22, 23, 33, 34, 44, 55, 66, 77, 45, 56, 67, 78:88) ~ 1,
plot %in% 13:21 | plot %in% 68:76 | plot %in% c(24, 35, 46, 57, 32, 43, 54, 65) ~ 2,
plot %in% 25:31 | plot %in% 58:64 | plot %in% c(36, 47, 53, 42) ~ 3,
plot %in% 37:41 | plot %in% 48:52 ~ 4,
TRUE ~ NA_real_ # If no condition matches, return NA
)
)
rlang::last_trace()
# Loading Bioclive design
bioclive_design <- bioclive_design|>
select(-...1) |>
mutate(subplot = paste0(plot, subplot)) |>
mutate(
dist_wall = case_when(
plot %in% 1:11 | plot %in% c(12, 22, 23, 33, 34, 44, 55, 66, 77, 45, 56, 67, 78:88) ~ 1,
plot %in% 13:21 | plot %in% 68:76 | plot %in% c(24, 35, 46, 57, 32, 43, 54, 65) ~ 2,
plot %in% 25:31 | plot %in% 58:64 | plot %in% c(36, 47, 53, 42) ~ 3,
plot %in% 37:41 | plot %in% 48:52 ~ 4,
TRUE ~ NA_real_ # If no condition matches, return NA
)
)
View(bioclive_design)
# Cleaning up the probe data
# Lowercase plots and format the probe code
microclimate_shield[, subplot := tolower(subplot)]
microclimate_shield[, probe := substr(probe, 6, 13)]
View(microclimate_shield)
# Convert to data.table
setDT(microclimate_shield)
microclimate_shield[, subplot := tolower(subplot)]
View(microclimate_shield)
microclimate_shield[, probe := substr(probe, 6, 13)]
View(microclimate_shield)
