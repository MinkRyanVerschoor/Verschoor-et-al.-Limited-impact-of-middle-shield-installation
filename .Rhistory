theme_classic() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, family = "Arial", size = 16),
axis.text.y = element_text(family = "Arial", size = 16),
axis.title.x = element_text(family = "Arial", size = 16,
margin = margin(t = 10, r = 0, b = 0, l = 0)), # Adds 10 units of space to the bottom,
axis.title.y = element_text(family = "Arial", size = 16,
margin = margin(t = 0, r = 10, b = 0, l = 0)), # Adds 10 units of space to the right
legend.title = element_text(family = "Arial", size = 16),
legend.text = element_text(family = "Arial", size = 16),
legend.position = "none",
legend.key = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm"),
panel.grid.minor = element_line(color = "gray", linetype = "dashed", size = 0.5) # Add minor gridlines
) +
scale_x_discrete(expand = expansion(mult = c(0.1, 0.1))) +
scale_color_manual(values = shield_colors) +
scale_fill_manual(values = shield_colors)
Plot_ST_shield
#For the total
m_max_T_shield_dist = brm(max_T2 ~ dist_wall + (1|div), data = microclimate_shield_day)
plot(m_max_T_shield_day)
plot(m_max_T_shield_dist)
summary(m_max_T_shield_dist)
#For the total
m_max_T_shield_day = brm(max_T2 ~ midshield + (1|div), data = microclimate_shield_day)
plot(m_max_T_shield_day)
summary(m_max_T_shield_day)
#For the total
m_max_T_shield_day = brm(max_T2_90 ~ midshield + (1|div), data = microclimate_shield_day)
plot(m_max_T_shield_day)
summary(m_max_T_shield_day)
#For the total
m_max_T_shield_day = brm(max_T2_95 ~ midshield + (1|div), data = microclimate_shield_day)
plot(m_max_T_shield_day)
summary(m_max_T_shield_day)
pp_check(m_max_T_shield_day)
#For the total
m_max_T_shield_day = brm(max_T2_99 ~ midshield + (1|div), data = microclimate_shield_day)
plot(m_max_T_shield_day)
summary(m_max_T_shield_day)
pp_check(m_max_T_shield_day)
m_max_T_shield_date_day<- brm(max_T2_95 ~ midshield * Date + (1|div), data = microclimate_shield_day)
m_max_T_shield_date_day<- brm(max_T2_95 ~ midshield * Date + (1|div), data = microclimate_shield_date_day)
#For the total
m_max_T_shield_dist = brm(max_T2 ~ dist_wall + (1|div), data = microclimate_shield_day)
# Chunk 1: renv environment
# clear everything in the R environment
rm(list = ls())
# restore the library
renv::restore()
# Load configuration settings for collaborative data loading
source("config.R")
# Chunk 2: packages
# Loading and installing the required Packages
#General
library(tidyverse)
library(data.table)
library(MetBrewer)
library(ggh4x)
library(ggsignif)
library(patchwork)
library(lme4)
library(brms)
library(extrafont)
# Chunk 3: Loading in the data
#GENERAL NOTE#
# ----- Load in the data --------#
microclimate_shield_day = load_data("microclimate_shield_total_day.csv") |>
mutate(across(where(is.integer), as.factor))
microclimate_shield_night = load_data("microclimate_shield_total_night.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_day = load_data("microclimate_shield_date_day.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_night = load_data("microclimate_shield_date_night.csv")|>
mutate(across(where(is.integer), as.factor))
# Ensure that Date is in Date format
microclimate_shield_date_day$Date <- as.Date(microclimate_shield_date_day$Date)
microclimate_shield_date_night$Date <- as.Date(microclimate_shield_date_night$Date)
#For the total
m_max_T_shield_dist = brm(max_T2 ~ dist_wall + (1|div), data = microclimate_shield_day)
summary(m_max_T_shield_dist)
#For the total
m_max_T_shield_dist = brm(max_T2_99 ~ dist_wall + (1|div), data = microclimate_shield_day)
summary(m_max_T_shield_dist)
#For the total
m_max_T_shield_dist = brm(max_T2_95 ~ dist_wall + (1|div), data = microclimate_shield_day)
summary(m_max_T_shield_dist)
#For the total
m_max_T_shield_dist = brm(max_T2_90 ~ dist_wall + (1|div), data = microclimate_shield_day)
summary(m_max_T_shield_dist)
#For the total
m_max_T_shield_night = brm(max_T2 ~ midshield + (1|div), data = microclimate_shield_night)
summary(m_max_T_shield_night)
#For the total
m_max_T_shield_night = brm(max_T2_99 ~ midshield + (1|div), data = microclimate_shield_night)
summary(m_max_T_shield_night)
#For the total
m_max_T_shield_night = brm(max_T2_95 ~ midshield + (1|div), data = microclimate_shield_night)
summary(m_max_T_shield_night)
#For the total
m_max_T_shield_night = brm(max_T2_90 ~ midshield + (1|div), data = microclimate_shield_night)
summary(m_max_T_shield_night)
m_max_T_shield_date_day<- brm(max_T2 ~ midshield * Date + (1|div), data = microclimate_shield_date_day)
#For the total
m_max_T_shield_day = brm(max_T2_95 ~ midshield + (1|div) + (1|dist.wall), data = microclimate_shield_day)
summary(m_max_T_shield_day)
#For the total
m_max_T_shield_day = brm(max_T2_95 ~ midshield + (1|div) + (1|dist.wall), data = microclimate_shield_day)
# Chunk 1: renv environment
# clear everything in the R environment
rm(list = ls())
# restore the library
renv::restore()
# Load configuration settings for collaborative data loading
source("config.R")
# Chunk 2: packages
# Loading and installing the required Packages
#General
library(tidyverse)
library(data.table)
library(MetBrewer)
library(ggh4x)
library(ggsignif)
library(patchwork)
library(lme4)
library(brms)
library(extrafont)
# Chunk 3: Loading in the data
#GENERAL NOTE#
# ----- Load in the data --------#
microclimate_shield_day = load_data("microclimate_shield_total_day.csv") |>
mutate(across(where(is.integer), as.factor))
microclimate_shield_night = load_data("microclimate_shield_total_night.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_day = load_data("microclimate_shield_date_day.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_night = load_data("microclimate_shield_date_night.csv")|>
mutate(across(where(is.integer), as.factor))
# Ensure that Date is in Date format
microclimate_shield_date_day$Date <- as.Date(microclimate_shield_date_day$Date)
microclimate_shield_date_night$Date <- as.Date(microclimate_shield_date_night$Date)
# Chunk 4: Setting up the color palette and fonts
# Load the color palette and ensure it has enough colors for the unique levels in `treatment`
# Define the specific colors for each treatment
palette <- met.brewer("Lakota", n = 6, type = "discrete")
# Create the expanded palette for the gradient (12 colors for 12 species)
shield_colors <- c(
"present" = palette[5],
"absent" = palette[3])
loadfonts(device = "all")    # Loads the fonts
fonts()
#For the total
m_max_T_shield_day = brm(max_T2_95 ~ midshield + (1|div) + (1|dist.wall), data = microclimate_shield_day)
# Chunk 1: renv environment
# clear everything in the R environment
rm(list = ls())
# restore the library
renv::restore()
# Load configuration settings for collaborative data loading
source("config.R")
# Chunk 2: packages
# Loading and installing the required Packages
#General
library(tidyverse)
library(data.table)
library(MetBrewer)
library(ggh4x)
library(ggsignif)
library(patchwork)
library(lme4)
library(brms)
library(extrafont)
# Chunk 3: Loading in the data
#GENERAL NOTE#
# ----- Load in the data --------#
microclimate_shield_day = load_data("microclimate_shield_total_day.csv") |>
mutate(across(where(is.integer), as.factor))
microclimate_shield_night = load_data("microclimate_shield_total_night.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_day = load_data("microclimate_shield_date_day.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_night = load_data("microclimate_shield_date_night.csv")|>
mutate(across(where(is.integer), as.factor))
# Ensure that Date is in Date format
microclimate_shield_date_day$Date <- as.Date(microclimate_shield_date_day$Date)
microclimate_shield_date_night$Date <- as.Date(microclimate_shield_date_night$Date)
# Chunk 4: Setting up the color palette and fonts
# Load the color palette and ensure it has enough colors for the unique levels in `treatment`
# Define the specific colors for each treatment
palette <- met.brewer("Lakota", n = 6, type = "discrete")
# Create the expanded palette for the gradient (12 colors for 12 species)
shield_colors <- c(
"present" = palette[5],
"absent" = palette[3])
loadfonts(device = "all")    # Loads the fonts
fonts()
#For the total
m_max_T_shield_day = brm(max_T2_95 ~ midshield + (1|div) + (1|dist.wall), data = microclimate_shield_day)
#For the total
m_max_T_shield_day = brm(max_T2_95 ~ midshield + (1|div) + (1|dist_wall), data = microclimate_shield_day)
plot(m_max_T_shield_day)
pp_check(m_max_T_shield_day)
summary(m_max_T_shield_day)
m_max_T_shield_date_day<- brm(max_T2_95 ~ midshield * Date + (1|div) + (1|dist_wall), data = microclimate_shield_date_day)
ncores = detectCores()
detectCores()
m_max_T_shield_date_day<- brm(max_T2_95 ~ midshield * Date + (1|div) + (1|dist_wall), data = microclimate_shield_date_day, cores = getOption("mc.cores", 1),)
m_max_T_shield_date_day<- brm(max_T2_95 ~ midshield * Date + (1|div) + (1|dist_wall), data = microclimate_shield_date_day, cores = 4)
m_max_T_shield_date_day<- brm(max_T2_95 ~ midshield * Date + (1|div) + (1|dist_wall), data = microclimate_shield_date_day, cores =  mc.cores)
# Chunk 1: renv environment
# clear everything in the R environment
rm(list = ls())
# restore the library
renv::restore()
# Load configuration settings for collaborative data loading
source("config.R")
# Chunk 2: packages
# Loading and installing the required Packages
#General
library(tidyverse)
library(data.table)
library(MetBrewer)
library(ggh4x)
library(ggsignif)
library(patchwork)
library(lme4)
library(brms)
library(extrafont)
# Chunk 3: Loading in the data
#GENERAL NOTE#
# ----- Load in the data --------#
microclimate_shield_day = load_data("microclimate_shield_total_day.csv") |>
mutate(across(where(is.integer), as.factor))
microclimate_shield_night = load_data("microclimate_shield_total_night.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_day = load_data("microclimate_shield_date_day.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_night = load_data("microclimate_shield_date_night.csv")|>
mutate(across(where(is.integer), as.factor))
# Ensure that Date is in Date format
microclimate_shield_date_day$Date <- as.Date(microclimate_shield_date_day$Date)
microclimate_shield_date_night$Date <- as.Date(microclimate_shield_date_night$Date)
# Chunk 4: Setting up the color palette and fonts
# Load the color palette and ensure it has enough colors for the unique levels in `treatment`
# Define the specific colors for each treatment
palette <- met.brewer("Lakota", n = 6, type = "discrete")
# Create the expanded palette for the gradient (12 colors for 12 species)
shield_colors <- c(
"present" = palette[5],
"absent" = palette[3])
loadfonts(device = "all")    # Loads the fonts
fonts()
m_max_T_shield_date_day<- brm(max_T2_95 ~ midshield * Date + (1|div) + (1|dist_wall), data = microclimate_shield_date_day)
plot(m_max_T_shield_date_day)
pp_check(m_max_T_shield_day)
pp_check(m_max_T_shield_date_day)
summary(m_max_T_shield_date_day)
# Chunk 1: renv environment
# clear everything in the R environment
rm(list = ls())
# restore the library
renv::restore()
# Load configuration settings for collaborative data loading
source("config.R")
# Chunk 2: packages
# Loading and installing the required Packages
#General
library(tidyverse)
library(data.table)
library(MetBrewer)
library(ggh4x)
library(ggsignif)
library(patchwork)
library(lme4)
library(brms)
library(extrafont)
# Chunk 3: Loading in the data
#GENERAL NOTE#
# ----- Load in the data --------#
microclimate_shield_day = load_data("microclimate_shield_total_day.csv") |>
mutate(across(where(is.integer), as.factor))
microclimate_shield_night = load_data("microclimate_shield_total_night.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_day = load_data("microclimate_shield_date_day.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_night = load_data("microclimate_shield_date_night.csv")|>
mutate(across(where(is.integer), as.factor))
# Ensure that Date is in Date format
microclimate_shield_date_day$Date <- as.Date(microclimate_shield_date_day$Date)
microclimate_shield_date_night$Date <- as.Date(microclimate_shield_date_night$Date)
# Chunk 4: Setting up the color palette and fonts
# Load the color palette and ensure it has enough colors for the unique levels in `treatment`
# Define the specific colors for each treatment
palette <- met.brewer("Lakota", n = 6, type = "discrete")
# Create the expanded palette for the gradient (12 colors for 12 species)
shield_colors <- c(
"present" = palette[5],
"absent" = palette[3])
loadfonts(device = "all")    # Loads the fonts
fonts()
m_max_T_shield_date_day<- brm(max_T2_95 ~ midshield * Date + (1|div), data = microclimate_shield_date_day)
plot(m_max_T_shield_date_day)
pp_check(m_max_T_shield_date_day)
summary(m_max_T_shield_date_day)
#For the total
m_max_T_shield_night = brm(max_T2_95 ~ midshield + (1|div), data = microclimate_shield_night)
install.packages("cmdstanr")
# Install cmdstanr if you haven’t already
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
# Set cmdstanr as backend
library(cmdstanr)
options(brms.backend = "cmdstanr")
#Per day
options(brms.backend = "cmdstanr")  # Use faster backend
m_max_T_shield_date_day <- brm(
max_T2_95 ~ midshield * Date + (1|div),
data = microclimate_shield_date_day,
iter = 4000,
warmup = 2000,
chains = 2,
threads = parallel::detectCores(),
backend = "cmdstanr",
control = list(adapt_delta = 0.95, max_treedepth = 12)
)
cmdstanr::install_cmdstan()
cmdstanr::check_cmdstan_toolchain(fix = TRUE)
cmdstanr::install_cmdstan()
options(brms.backend = "cmdstanr")
#Per day
options(brms.backend = "cmdstanr")  # Use faster backend
m_max_T_shield_date_day <- brm(
max_T2_95 ~ midshield * Date + (1|div),
data = microclimate_shield_date_day,
iter = 4000,
warmup = 2000,
chains = 2,
threads = parallel::detectCores(),
backend = "cmdstanr",
control = list(adapt_delta = 0.95, max_treedepth = 12)
)
m_max_T_shield_date_day <- brm(
max_T2_95 ~ midshield * Date + (1|div),
data = microclimate_shield_date_day,
iter = 4000,
warmup = 2000,
chains = 2,
threads = parallel::detectCores(),
control = list(adapt_delta = 0.95, max_treedepth = 12)
)
m_max_T_shield_date_day <- brm(
max_T2_95 ~ midshield * Date + (1|div),
data = microclimate_shield_date_day,
iter = 4000,
warmup = 2000,
chains = 2,
threads = parallel::detectCores()
)
# Chunk 1: renv environment
# clear everything in the R environment
rm(list = ls())
# restore the library
renv::restore()
# Load configuration settings for collaborative data loading
source("config.R")
# Chunk 2: packages
# Loading and installing the required Packages
#General
library(tidyverse)
library(data.table)
library(MetBrewer)
library(ggh4x)
library(ggsignif)
library(patchwork)
library(lme4)
library(brms)
library(extrafont)
# Chunk 3: Loading in the data
#GENERAL NOTE#
# ----- Load in the data --------#
microclimate_shield_day = load_data("microclimate_shield_total_day.csv") |>
mutate(across(where(is.integer), as.factor))
microclimate_shield_night = load_data("microclimate_shield_total_night.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_day = load_data("microclimate_shield_date_day.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_night = load_data("microclimate_shield_date_night.csv")|>
mutate(across(where(is.integer), as.factor))
# Ensure that Date is in Date format
microclimate_shield_date_day$Date <- as.Date(microclimate_shield_date_day$Date)
microclimate_shield_date_night$Date <- as.Date(microclimate_shield_date_night$Date)
# Chunk 4: Setting up the color palette and fonts
# Load the color palette and ensure it has enough colors for the unique levels in `treatment`
# Define the specific colors for each treatment
palette <- met.brewer("Lakota", n = 6, type = "discrete")
# Create the expanded palette for the gradient (12 colors for 12 species)
shield_colors <- c(
"present" = palette[5],
"absent" = palette[3])
loadfonts(device = "all")    # Loads the fonts
fonts()
m_max_T_shield_date_day <- brm(
max_T2_95 ~ midshield * Date + (1|div),
data = microclimate_shield_date_day,
iter = 4000,  # Increase iterations
warmup = 2000,  # Increase warmup
chains = 2,
threads = parallel::detectCores(),
control = list(adapt_delta = 0.99, max_treedepth = 15)  # Improve sampling
)
install.packages("cmdstanr", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
library(cmdstanr)
check_cmdstan_toolchain()
install_cmdstan(cores = 2)
install_cmdstan(cores = 2, overwrite = TRUE)
cmdstanr::cmdstan_path()
# Chunk 1: renv environment
# clear everything in the R environment
rm(list = ls())
# restore the library
renv::restore()
# Load configuration settings for collaborative data loading
source("config.R")
# Chunk 2: packages
# Loading and installing the required Packages
#General
library(tidyverse)
library(data.table)
library(MetBrewer)
library(ggh4x)
library(ggsignif)
library(patchwork)
library(lme4)
library(brms)
library(extrafont)
#CMDSTAN
library(cmdstanr)
# Load the color palette and ensure it has enough colors for the unique levels in `treatment`
# Define the specific colors for each treatment
palette <- met.brewer("Lakota", n = 6, type = "discrete")
# Create the expanded palette for the gradient (12 colors for 12 species)
shield_colors <- c(
"present" = palette[5],
"absent" = palette[3])
loadfonts(device = "all")    # Loads the fonts
fonts()
m_max_T_shield_date_day <- brm(
max_T2_95 ~ midshield * Date + (1|div),
data = microclimate_shield_date_day,
iter = 4000,  # Increase iterations
warmup = 2000,  # Increase warmup
chains = 2,
threads = parallel::detectCores(),
backend = "cmdstanr",
control = list(adapt_delta = 0.99, max_treedepth = 15)  # Improve sampling
)
# Chunk 1: renv environment
# clear everything in the R environment
rm(list = ls())
# restore the library
renv::restore()
# Load configuration settings for collaborative data loading
source("config.R")
# Chunk 2: packages
# Loading and installing the required Packages
#General
library(tidyverse)
library(data.table)
library(MetBrewer)
library(ggh4x)
library(ggsignif)
library(patchwork)
library(lme4)
library(brms)
library(extrafont)
#CMDSTAN
library(cmdstanr)
# Chunk 3: Loading in the data
#GENERAL NOTE#
# ----- Load in the data --------#
microclimate_shield_day = load_data("microclimate_shield_total_day.csv") |>
mutate(across(where(is.integer), as.factor))
microclimate_shield_night = load_data("microclimate_shield_total_night.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_day = load_data("microclimate_shield_date_day.csv")|>
mutate(across(where(is.integer), as.factor))
microclimate_shield_date_night = load_data("microclimate_shield_date_night.csv")|>
mutate(across(where(is.integer), as.factor))
# Ensure that Date is in Date format
microclimate_shield_date_day$Date <- as.Date(microclimate_shield_date_day$Date)
microclimate_shield_date_night$Date <- as.Date(microclimate_shield_date_night$Date)
# Chunk 4: Setting up the color palette and fonts
# Load the color palette and ensure it has enough colors for the unique levels in `treatment`
# Define the specific colors for each treatment
palette <- met.brewer("Lakota", n = 6, type = "discrete")
# Create the expanded palette for the gradient (12 colors for 12 species)
shield_colors <- c(
"present" = palette[5],
"absent" = palette[3])
loadfonts(device = "all")    # Loads the fonts
m_max_T_shield_date_day <- brm(
max_T2_95 ~ midshield * Date + (1|div),
data = microclimate_shield_date_day,
iter = 4000,  # Increase iterations
warmup = 2000,  # Increase warmup
chains = 2,
threads = parallel::detectCores(),
backend = "cmdstanr",
control = list(adapt_delta = 0.99, max_treedepth = 15)  # Improve sampling
)
